// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="a0_via_dma_in0,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045-ffg900-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=625,HLS_SYN_LUT=665,HLS_VERSION=2019_1}" *)

module a0_via_dma_in0 (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_in0_AWVALID,
        m_axi_in0_AWREADY,
        m_axi_in0_AWADDR,
        m_axi_in0_AWID,
        m_axi_in0_AWLEN,
        m_axi_in0_AWSIZE,
        m_axi_in0_AWBURST,
        m_axi_in0_AWLOCK,
        m_axi_in0_AWCACHE,
        m_axi_in0_AWPROT,
        m_axi_in0_AWQOS,
        m_axi_in0_AWREGION,
        m_axi_in0_AWUSER,
        m_axi_in0_WVALID,
        m_axi_in0_WREADY,
        m_axi_in0_WDATA,
        m_axi_in0_WSTRB,
        m_axi_in0_WLAST,
        m_axi_in0_WID,
        m_axi_in0_WUSER,
        m_axi_in0_ARVALID,
        m_axi_in0_ARREADY,
        m_axi_in0_ARADDR,
        m_axi_in0_ARID,
        m_axi_in0_ARLEN,
        m_axi_in0_ARSIZE,
        m_axi_in0_ARBURST,
        m_axi_in0_ARLOCK,
        m_axi_in0_ARCACHE,
        m_axi_in0_ARPROT,
        m_axi_in0_ARQOS,
        m_axi_in0_ARREGION,
        m_axi_in0_ARUSER,
        m_axi_in0_RVALID,
        m_axi_in0_RREADY,
        m_axi_in0_RDATA,
        m_axi_in0_RLAST,
        m_axi_in0_RID,
        m_axi_in0_RUSER,
        m_axi_in0_RRESP,
        m_axi_in0_BVALID,
        m_axi_in0_BREADY,
        m_axi_in0_BRESP,
        m_axi_in0_BID,
        m_axi_in0_BUSER,
        in0_offset,
        len,
        data_TDATA,
        data_TVALID,
        data_TREADY
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_pp0_stage0 = 9'd128;
parameter    ap_ST_fsm_state11 = 9'd256;
parameter    C_M_AXI_IN0_ID_WIDTH = 1;
parameter    C_M_AXI_IN0_ADDR_WIDTH = 32;
parameter    C_M_AXI_IN0_DATA_WIDTH = 32;
parameter    C_M_AXI_IN0_AWUSER_WIDTH = 1;
parameter    C_M_AXI_IN0_ARUSER_WIDTH = 1;
parameter    C_M_AXI_IN0_WUSER_WIDTH = 1;
parameter    C_M_AXI_IN0_RUSER_WIDTH = 1;
parameter    C_M_AXI_IN0_BUSER_WIDTH = 1;
parameter    C_M_AXI_IN0_USER_VALUE = 0;
parameter    C_M_AXI_IN0_PROT_VALUE = 0;
parameter    C_M_AXI_IN0_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_M_AXI_IN0_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_in0_AWVALID;
input   m_axi_in0_AWREADY;
output  [C_M_AXI_IN0_ADDR_WIDTH - 1:0] m_axi_in0_AWADDR;
output  [C_M_AXI_IN0_ID_WIDTH - 1:0] m_axi_in0_AWID;
output  [7:0] m_axi_in0_AWLEN;
output  [2:0] m_axi_in0_AWSIZE;
output  [1:0] m_axi_in0_AWBURST;
output  [1:0] m_axi_in0_AWLOCK;
output  [3:0] m_axi_in0_AWCACHE;
output  [2:0] m_axi_in0_AWPROT;
output  [3:0] m_axi_in0_AWQOS;
output  [3:0] m_axi_in0_AWREGION;
output  [C_M_AXI_IN0_AWUSER_WIDTH - 1:0] m_axi_in0_AWUSER;
output   m_axi_in0_WVALID;
input   m_axi_in0_WREADY;
output  [C_M_AXI_IN0_DATA_WIDTH - 1:0] m_axi_in0_WDATA;
output  [C_M_AXI_IN0_WSTRB_WIDTH - 1:0] m_axi_in0_WSTRB;
output   m_axi_in0_WLAST;
output  [C_M_AXI_IN0_ID_WIDTH - 1:0] m_axi_in0_WID;
output  [C_M_AXI_IN0_WUSER_WIDTH - 1:0] m_axi_in0_WUSER;
output   m_axi_in0_ARVALID;
input   m_axi_in0_ARREADY;
output  [C_M_AXI_IN0_ADDR_WIDTH - 1:0] m_axi_in0_ARADDR;
output  [C_M_AXI_IN0_ID_WIDTH - 1:0] m_axi_in0_ARID;
output  [7:0] m_axi_in0_ARLEN;
output  [2:0] m_axi_in0_ARSIZE;
output  [1:0] m_axi_in0_ARBURST;
output  [1:0] m_axi_in0_ARLOCK;
output  [3:0] m_axi_in0_ARCACHE;
output  [2:0] m_axi_in0_ARPROT;
output  [3:0] m_axi_in0_ARQOS;
output  [3:0] m_axi_in0_ARREGION;
output  [C_M_AXI_IN0_ARUSER_WIDTH - 1:0] m_axi_in0_ARUSER;
input   m_axi_in0_RVALID;
output   m_axi_in0_RREADY;
input  [C_M_AXI_IN0_DATA_WIDTH - 1:0] m_axi_in0_RDATA;
input   m_axi_in0_RLAST;
input  [C_M_AXI_IN0_ID_WIDTH - 1:0] m_axi_in0_RID;
input  [C_M_AXI_IN0_RUSER_WIDTH - 1:0] m_axi_in0_RUSER;
input  [1:0] m_axi_in0_RRESP;
input   m_axi_in0_BVALID;
output   m_axi_in0_BREADY;
input  [1:0] m_axi_in0_BRESP;
input  [C_M_AXI_IN0_ID_WIDTH - 1:0] m_axi_in0_BID;
input  [C_M_AXI_IN0_BUSER_WIDTH - 1:0] m_axi_in0_BUSER;
input  [31:0] in0_offset;
input  [31:0] len;
output  [31:0] data_TDATA;
output   data_TVALID;
input   data_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] data_1_data_out;
reg    data_1_vld_in;
wire    data_1_vld_out;
wire    data_1_ack_in;
wire    data_1_ack_out;
reg   [31:0] data_1_payload_A;
reg   [31:0] data_1_payload_B;
reg    data_1_sel_rd;
reg    data_1_sel_wr;
wire    data_1_sel;
wire    data_1_load_A;
wire    data_1_load_B;
reg   [1:0] data_1_state;
wire    data_1_state_cmp_full;
reg    in0_blk_n_AR;
reg    in0_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln10_reg_157;
reg    data_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln10_reg_157_pp0_iter1_reg;
wire    in0_AWREADY;
wire    in0_WREADY;
reg    in0_ARVALID;
wire    in0_ARREADY;
wire    in0_RVALID;
reg    in0_RREADY;
wire   [31:0] in0_RDATA;
wire    in0_RLAST;
wire   [0:0] in0_RID;
wire   [0:0] in0_RUSER;
wire   [1:0] in0_RRESP;
wire    in0_BVALID;
wire   [1:0] in0_BRESP;
wire   [0:0] in0_BID;
wire   [0:0] in0_BUSER;
reg   [30:0] i_0_reg_98;
wire   [0:0] icmp_ln10_fu_134_p2;
wire    ap_block_state8_pp0_stage0_iter0;
reg    ap_block_state9_pp0_stage0_iter1;
reg    ap_block_state9_io;
wire    ap_block_state10_pp0_stage0_iter2;
reg    ap_block_state10_io;
reg    ap_block_pp0_stage0_11001;
wire   [30:0] i_fu_139_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_CS_fsm_state7;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state8;
wire   [31:0] empty_fu_119_p1;
reg    ap_block_pp0_stage0_01001;
wire   [29:0] in0_offset1_fu_109_p4;
wire   [31:0] zext_ln10_fu_130_p1;
wire    ap_CS_fsm_state11;
reg    ap_block_state11;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 data_1_sel_rd = 1'b0;
#0 data_1_sel_wr = 1'b0;
#0 data_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

a0_via_dma_in0_in0_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_IN0_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_IN0_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_IN0_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_IN0_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_IN0_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_IN0_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_IN0_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_IN0_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_IN0_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_IN0_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_IN0_CACHE_VALUE ))
via_dma_in0_in0_m_axi_U(
    .AWVALID(m_axi_in0_AWVALID),
    .AWREADY(m_axi_in0_AWREADY),
    .AWADDR(m_axi_in0_AWADDR),
    .AWID(m_axi_in0_AWID),
    .AWLEN(m_axi_in0_AWLEN),
    .AWSIZE(m_axi_in0_AWSIZE),
    .AWBURST(m_axi_in0_AWBURST),
    .AWLOCK(m_axi_in0_AWLOCK),
    .AWCACHE(m_axi_in0_AWCACHE),
    .AWPROT(m_axi_in0_AWPROT),
    .AWQOS(m_axi_in0_AWQOS),
    .AWREGION(m_axi_in0_AWREGION),
    .AWUSER(m_axi_in0_AWUSER),
    .WVALID(m_axi_in0_WVALID),
    .WREADY(m_axi_in0_WREADY),
    .WDATA(m_axi_in0_WDATA),
    .WSTRB(m_axi_in0_WSTRB),
    .WLAST(m_axi_in0_WLAST),
    .WID(m_axi_in0_WID),
    .WUSER(m_axi_in0_WUSER),
    .ARVALID(m_axi_in0_ARVALID),
    .ARREADY(m_axi_in0_ARREADY),
    .ARADDR(m_axi_in0_ARADDR),
    .ARID(m_axi_in0_ARID),
    .ARLEN(m_axi_in0_ARLEN),
    .ARSIZE(m_axi_in0_ARSIZE),
    .ARBURST(m_axi_in0_ARBURST),
    .ARLOCK(m_axi_in0_ARLOCK),
    .ARCACHE(m_axi_in0_ARCACHE),
    .ARPROT(m_axi_in0_ARPROT),
    .ARQOS(m_axi_in0_ARQOS),
    .ARREGION(m_axi_in0_ARREGION),
    .ARUSER(m_axi_in0_ARUSER),
    .RVALID(m_axi_in0_RVALID),
    .RREADY(m_axi_in0_RREADY),
    .RDATA(m_axi_in0_RDATA),
    .RLAST(m_axi_in0_RLAST),
    .RID(m_axi_in0_RID),
    .RUSER(m_axi_in0_RUSER),
    .RRESP(m_axi_in0_RRESP),
    .BVALID(m_axi_in0_BVALID),
    .BREADY(m_axi_in0_BREADY),
    .BRESP(m_axi_in0_BRESP),
    .BID(m_axi_in0_BID),
    .BUSER(m_axi_in0_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(in0_ARVALID),
    .I_ARREADY(in0_ARREADY),
    .I_ARADDR(empty_fu_119_p1),
    .I_ARID(1'd0),
    .I_ARLEN(len),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(in0_RVALID),
    .I_RREADY(in0_RREADY),
    .I_RDATA(in0_RDATA),
    .I_RID(in0_RID),
    .I_RUSER(in0_RUSER),
    .I_RRESP(in0_RRESP),
    .I_RLAST(in0_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(in0_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(in0_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(in0_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(in0_BRESP),
    .I_BID(in0_BID),
    .I_BUSER(in0_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state8)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state8);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_1_sel_rd <= 1'b0;
    end else begin
        if (((data_1_ack_out == 1'b1) & (data_1_vld_out == 1'b1))) begin
            data_1_sel_rd <= ~data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_1_sel_wr <= 1'b0;
    end else begin
        if (((data_1_ack_in == 1'b1) & (data_1_vld_in == 1'b1))) begin
            data_1_sel_wr <= ~data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_1_state <= 2'd0;
    end else begin
        if ((((data_1_vld_in == 1'b0) & (data_1_state == 2'd2)) | ((data_1_vld_in == 1'b0) & (data_1_ack_out == 1'b1) & (data_1_state == 2'd3)))) begin
            data_1_state <= 2'd2;
        end else if ((((data_TREADY == 1'b0) & (data_1_state == 2'd1)) | ((data_TREADY == 1'b0) & (data_1_vld_in == 1'b1) & (data_1_state == 2'd3)))) begin
            data_1_state <= 2'd1;
        end else if (((~((data_1_vld_in == 1'b0) & (data_1_ack_out == 1'b1)) & ~((data_TREADY == 1'b0) & (data_1_vld_in == 1'b1)) & (data_1_state == 2'd3)) | ((data_1_ack_out == 1'b1) & (data_1_state == 2'd1)) | ((data_1_vld_in == 1'b1) & (data_1_state == 2'd2)))) begin
            data_1_state <= 2'd3;
        end else begin
            data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln10_fu_134_p2 == 1'd1))) begin
        i_0_reg_98 <= i_fu_139_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i_0_reg_98 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((data_1_load_A == 1'b1)) begin
        data_1_payload_A <= in0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((data_1_load_B == 1'b1)) begin
        data_1_payload_B <= in0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln10_reg_157 <= icmp_ln10_fu_134_p2;
        icmp_ln10_reg_157_pp0_iter1_reg <= icmp_ln10_reg_157;
    end
end

always @ (*) begin
    if ((icmp_ln10_fu_134_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((~((data_1_state == 2'd1) | ((data_TREADY == 1'b0) & (data_1_state == 2'd3))) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((data_1_state == 2'd1) | ((data_TREADY == 1'b0) & (data_1_state == 2'd3))) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((data_1_sel == 1'b1)) begin
        data_1_data_out = data_1_payload_B;
    end else begin
        data_1_data_out = data_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln10_reg_157 == 1'd1))) begin
        data_1_vld_in = 1'b1;
    end else begin
        data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln10_reg_157_pp0_iter1_reg == 1'd1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln10_reg_157 == 1'd1)))) begin
        data_TDATA_blk_n = data_1_state[1'd1];
    end else begin
        data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((in0_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        in0_ARVALID = 1'b1;
    end else begin
        in0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln10_reg_157 == 1'd1))) begin
        in0_RREADY = 1'b1;
    end else begin
        in0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        in0_blk_n_AR = m_axi_in0_ARREADY;
    end else begin
        in0_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln10_reg_157 == 1'd1))) begin
        in0_blk_n_R = m_axi_in0_RVALID;
    end else begin
        in0_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((in0_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln10_fu_134_p2 == 1'd0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln10_fu_134_p2 == 1'd0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            if ((~((data_1_state == 2'd1) | ((data_TREADY == 1'b0) & (data_1_state == 2'd3))) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((in0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln10_reg_157 == 1'd1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state10_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state9_io) | ((in0_RVALID == 1'b0) & (icmp_ln10_reg_157 == 1'd1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state10_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state9_io) | ((in0_RVALID == 1'b0) & (icmp_ln10_reg_157 == 1'd1)))));
end

always @ (*) begin
    ap_block_state10_io = ((data_1_ack_in == 1'b0) & (icmp_ln10_reg_157_pp0_iter1_reg == 1'd1));
end

assign ap_block_state10_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11 = ((data_1_state == 2'd1) | ((data_TREADY == 1'b0) & (data_1_state == 2'd3)));
end

assign ap_block_state8_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_io = ((data_1_ack_in == 1'b0) & (icmp_ln10_reg_157 == 1'd1));
end

always @ (*) begin
    ap_block_state9_pp0_stage0_iter1 = ((in0_RVALID == 1'b0) & (icmp_ln10_reg_157 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign data_1_ack_in = data_1_state[1'd1];

assign data_1_ack_out = data_TREADY;

assign data_1_load_A = (~data_1_sel_wr & data_1_state_cmp_full);

assign data_1_load_B = (data_1_state_cmp_full & data_1_sel_wr);

assign data_1_sel = data_1_sel_rd;

assign data_1_state_cmp_full = ((data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign data_1_vld_out = data_1_state[1'd0];

assign data_TDATA = data_1_data_out;

assign data_TVALID = data_1_state[1'd0];

assign empty_fu_119_p1 = in0_offset1_fu_109_p4;

assign i_fu_139_p2 = (i_0_reg_98 + 31'd1);

assign icmp_ln10_fu_134_p2 = (($signed(zext_ln10_fu_130_p1) < $signed(len)) ? 1'b1 : 1'b0);

assign in0_offset1_fu_109_p4 = {{in0_offset[31:2]}};

assign zext_ln10_fu_130_p1 = i_0_reg_98;

endmodule //a0_via_dma_in0
