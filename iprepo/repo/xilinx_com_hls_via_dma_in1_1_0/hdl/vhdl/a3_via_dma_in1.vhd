-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity a3_via_dma_in1 is
generic (
    C_M_AXI_IN1_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_IN1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IN1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IN1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN1_USER_VALUE : INTEGER := 0;
    C_M_AXI_IN1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IN1_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_in1_AWVALID : OUT STD_LOGIC;
    m_axi_in1_AWREADY : IN STD_LOGIC;
    m_axi_in1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IN1_ADDR_WIDTH-1 downto 0);
    m_axi_in1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN1_ID_WIDTH-1 downto 0);
    m_axi_in1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_in1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN1_AWUSER_WIDTH-1 downto 0);
    m_axi_in1_WVALID : OUT STD_LOGIC;
    m_axi_in1_WREADY : IN STD_LOGIC;
    m_axi_in1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IN1_DATA_WIDTH-1 downto 0);
    m_axi_in1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IN1_DATA_WIDTH/8-1 downto 0);
    m_axi_in1_WLAST : OUT STD_LOGIC;
    m_axi_in1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN1_ID_WIDTH-1 downto 0);
    m_axi_in1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN1_WUSER_WIDTH-1 downto 0);
    m_axi_in1_ARVALID : OUT STD_LOGIC;
    m_axi_in1_ARREADY : IN STD_LOGIC;
    m_axi_in1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IN1_ADDR_WIDTH-1 downto 0);
    m_axi_in1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN1_ID_WIDTH-1 downto 0);
    m_axi_in1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_in1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN1_ARUSER_WIDTH-1 downto 0);
    m_axi_in1_RVALID : IN STD_LOGIC;
    m_axi_in1_RREADY : OUT STD_LOGIC;
    m_axi_in1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IN1_DATA_WIDTH-1 downto 0);
    m_axi_in1_RLAST : IN STD_LOGIC;
    m_axi_in1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IN1_ID_WIDTH-1 downto 0);
    m_axi_in1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IN1_RUSER_WIDTH-1 downto 0);
    m_axi_in1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in1_BVALID : IN STD_LOGIC;
    m_axi_in1_BREADY : OUT STD_LOGIC;
    m_axi_in1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IN1_ID_WIDTH-1 downto 0);
    m_axi_in1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IN1_BUSER_WIDTH-1 downto 0);
    in1_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    len : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    weight_TVALID : OUT STD_LOGIC;
    weight_TREADY : IN STD_LOGIC );
end;


architecture behav of a3_via_dma_in1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "a3_via_dma_in1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045-ffg900-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=625,HLS_SYN_LUT=665,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal weight_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_1_vld_in : STD_LOGIC;
    signal weight_1_vld_out : STD_LOGIC;
    signal weight_1_ack_in : STD_LOGIC;
    signal weight_1_ack_out : STD_LOGIC;
    signal weight_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_1_sel_rd : STD_LOGIC := '0';
    signal weight_1_sel_wr : STD_LOGIC := '0';
    signal weight_1_sel : STD_LOGIC;
    signal weight_1_load_A : STD_LOGIC;
    signal weight_1_load_B : STD_LOGIC;
    signal weight_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal weight_1_state_cmp_full : STD_LOGIC;
    signal in1_blk_n_AR : STD_LOGIC;
    signal in1_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln28_reg_157 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln28_reg_157_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_AWREADY : STD_LOGIC;
    signal in1_WREADY : STD_LOGIC;
    signal in1_ARVALID : STD_LOGIC;
    signal in1_ARREADY : STD_LOGIC;
    signal in1_RVALID : STD_LOGIC;
    signal in1_RREADY : STD_LOGIC;
    signal in1_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal in1_RLAST : STD_LOGIC;
    signal in1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal in1_BVALID : STD_LOGIC;
    signal in1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal in1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal in1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_98 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln28_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state8_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_io : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state10_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_139_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state8 : STD_LOGIC;
    signal empty_fu_119_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal in1_offset1_fu_109_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln28_fu_130_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_state11 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component a3_via_dma_in1_in1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    via_dma_in1_in1_m_axi_U : component a3_via_dma_in1_in1_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IN1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IN1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IN1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IN1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IN1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IN1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IN1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IN1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_IN1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IN1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IN1_CACHE_VALUE)
    port map (
        AWVALID => m_axi_in1_AWVALID,
        AWREADY => m_axi_in1_AWREADY,
        AWADDR => m_axi_in1_AWADDR,
        AWID => m_axi_in1_AWID,
        AWLEN => m_axi_in1_AWLEN,
        AWSIZE => m_axi_in1_AWSIZE,
        AWBURST => m_axi_in1_AWBURST,
        AWLOCK => m_axi_in1_AWLOCK,
        AWCACHE => m_axi_in1_AWCACHE,
        AWPROT => m_axi_in1_AWPROT,
        AWQOS => m_axi_in1_AWQOS,
        AWREGION => m_axi_in1_AWREGION,
        AWUSER => m_axi_in1_AWUSER,
        WVALID => m_axi_in1_WVALID,
        WREADY => m_axi_in1_WREADY,
        WDATA => m_axi_in1_WDATA,
        WSTRB => m_axi_in1_WSTRB,
        WLAST => m_axi_in1_WLAST,
        WID => m_axi_in1_WID,
        WUSER => m_axi_in1_WUSER,
        ARVALID => m_axi_in1_ARVALID,
        ARREADY => m_axi_in1_ARREADY,
        ARADDR => m_axi_in1_ARADDR,
        ARID => m_axi_in1_ARID,
        ARLEN => m_axi_in1_ARLEN,
        ARSIZE => m_axi_in1_ARSIZE,
        ARBURST => m_axi_in1_ARBURST,
        ARLOCK => m_axi_in1_ARLOCK,
        ARCACHE => m_axi_in1_ARCACHE,
        ARPROT => m_axi_in1_ARPROT,
        ARQOS => m_axi_in1_ARQOS,
        ARREGION => m_axi_in1_ARREGION,
        ARUSER => m_axi_in1_ARUSER,
        RVALID => m_axi_in1_RVALID,
        RREADY => m_axi_in1_RREADY,
        RDATA => m_axi_in1_RDATA,
        RLAST => m_axi_in1_RLAST,
        RID => m_axi_in1_RID,
        RUSER => m_axi_in1_RUSER,
        RRESP => m_axi_in1_RRESP,
        BVALID => m_axi_in1_BVALID,
        BREADY => m_axi_in1_BREADY,
        BRESP => m_axi_in1_BRESP,
        BID => m_axi_in1_BID,
        BUSER => m_axi_in1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => in1_ARVALID,
        I_ARREADY => in1_ARREADY,
        I_ARADDR => empty_fu_119_p1,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => len,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => in1_RVALID,
        I_RREADY => in1_RREADY,
        I_RDATA => in1_RDATA,
        I_RID => in1_RID,
        I_RUSER => in1_RUSER,
        I_RRESP => in1_RRESP,
        I_RLAST => in1_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => in1_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => in1_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => in1_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => in1_BRESP,
        I_BID => in1_BID,
        I_BUSER => in1_BUSER);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state8);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    weight_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                weight_1_sel_rd <= ap_const_logic_0;
            else
                if (((weight_1_ack_out = ap_const_logic_1) and (weight_1_vld_out = ap_const_logic_1))) then 
                                        weight_1_sel_rd <= not(weight_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    weight_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                weight_1_sel_wr <= ap_const_logic_0;
            else
                if (((weight_1_ack_in = ap_const_logic_1) and (weight_1_vld_in = ap_const_logic_1))) then 
                                        weight_1_sel_wr <= not(weight_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    weight_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                weight_1_state <= ap_const_lv2_0;
            else
                if ((((weight_1_vld_in = ap_const_logic_0) and (weight_1_state = ap_const_lv2_2)) or ((weight_1_vld_in = ap_const_logic_0) and (weight_1_ack_out = ap_const_logic_1) and (weight_1_state = ap_const_lv2_3)))) then 
                    weight_1_state <= ap_const_lv2_2;
                elsif ((((weight_TREADY = ap_const_logic_0) and (weight_1_state = ap_const_lv2_1)) or ((weight_TREADY = ap_const_logic_0) and (weight_1_vld_in = ap_const_logic_1) and (weight_1_state = ap_const_lv2_3)))) then 
                    weight_1_state <= ap_const_lv2_1;
                elsif (((not(((weight_1_vld_in = ap_const_logic_0) and (weight_1_ack_out = ap_const_logic_1))) and not(((weight_TREADY = ap_const_logic_0) and (weight_1_vld_in = ap_const_logic_1))) and (weight_1_state = ap_const_lv2_3)) or ((weight_1_ack_out = ap_const_logic_1) and (weight_1_state = ap_const_lv2_1)) or ((weight_1_vld_in = ap_const_logic_1) and (weight_1_state = ap_const_lv2_2)))) then 
                    weight_1_state <= ap_const_lv2_3;
                else 
                    weight_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln28_fu_134_p2 = ap_const_lv1_1))) then 
                i_0_reg_98 <= i_fu_139_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_0_reg_98 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln28_reg_157 <= icmp_ln28_fu_134_p2;
                icmp_ln28_reg_157_pp0_iter1_reg <= icmp_ln28_reg_157;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((weight_1_load_A = ap_const_logic_1)) then
                weight_1_payload_A <= in1_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((weight_1_load_B = ap_const_logic_1)) then
                weight_1_payload_B <= in1_RDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, weight_TREADY, weight_1_state, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, in1_ARREADY, icmp_ln28_fu_134_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_CS_fsm_state11)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((in1_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln28_fu_134_p2 = ap_const_lv1_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln28_fu_134_p2 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                if ((not(((weight_1_state = ap_const_lv2_1) or ((weight_TREADY = ap_const_logic_0) and (weight_1_state = ap_const_lv2_3)))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(8);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln28_reg_157, in1_RVALID)
    begin
                ap_block_pp0_stage0_01001 <= ((in1_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln28_reg_157 = ap_const_lv1_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln28_reg_157, ap_enable_reg_pp0_iter2, in1_RVALID, ap_block_state9_io, ap_block_state10_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state10_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state9_io) or ((in1_RVALID = ap_const_logic_0) and (icmp_ln28_reg_157 = ap_const_lv1_1)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln28_reg_157, ap_enable_reg_pp0_iter2, in1_RVALID, ap_block_state9_io, ap_block_state10_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state10_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state9_io) or ((in1_RVALID = ap_const_logic_0) and (icmp_ln28_reg_157 = ap_const_lv1_1)))));
    end process;


    ap_block_state10_io_assign_proc : process(weight_1_ack_in, icmp_ln28_reg_157_pp0_iter1_reg)
    begin
                ap_block_state10_io <= ((weight_1_ack_in = ap_const_logic_0) and (icmp_ln28_reg_157_pp0_iter1_reg = ap_const_lv1_1));
    end process;

        ap_block_state10_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_assign_proc : process(weight_TREADY, weight_1_state)
    begin
                ap_block_state11 <= ((weight_1_state = ap_const_lv2_1) or ((weight_TREADY = ap_const_logic_0) and (weight_1_state = ap_const_lv2_3)));
    end process;

        ap_block_state8_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_io_assign_proc : process(weight_1_ack_in, icmp_ln28_reg_157)
    begin
                ap_block_state9_io <= ((weight_1_ack_in = ap_const_logic_0) and (icmp_ln28_reg_157 = ap_const_lv1_1));
    end process;


    ap_block_state9_pp0_stage0_iter1_assign_proc : process(icmp_ln28_reg_157, in1_RVALID)
    begin
                ap_block_state9_pp0_stage0_iter1 <= ((in1_RVALID = ap_const_logic_0) and (icmp_ln28_reg_157 = ap_const_lv1_1));
    end process;


    ap_condition_pp0_exit_iter0_state8_assign_proc : process(icmp_ln28_fu_134_p2)
    begin
        if ((icmp_ln28_fu_134_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(weight_TREADY, weight_1_state, ap_CS_fsm_state11)
    begin
        if ((not(((weight_1_state = ap_const_lv2_1) or ((weight_TREADY = ap_const_logic_0) and (weight_1_state = ap_const_lv2_3)))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(weight_TREADY, weight_1_state, ap_CS_fsm_state11)
    begin
        if ((not(((weight_1_state = ap_const_lv2_1) or ((weight_TREADY = ap_const_logic_0) and (weight_1_state = ap_const_lv2_3)))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    empty_fu_119_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in1_offset1_fu_109_p4),32));
    i_fu_139_p2 <= std_logic_vector(unsigned(i_0_reg_98) + unsigned(ap_const_lv31_1));
    icmp_ln28_fu_134_p2 <= "1" when (signed(zext_ln28_fu_130_p1) < signed(len)) else "0";

    in1_ARVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, in1_ARREADY)
    begin
        if ((not(((in1_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in1_ARVALID <= ap_const_logic_1;
        else 
            in1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    in1_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln28_reg_157, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln28_reg_157 = ap_const_lv1_1))) then 
            in1_RREADY <= ap_const_logic_1;
        else 
            in1_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    in1_blk_n_AR_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_in1_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            in1_blk_n_AR <= m_axi_in1_ARREADY;
        else 
            in1_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    in1_blk_n_R_assign_proc : process(m_axi_in1_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln28_reg_157)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln28_reg_157 = ap_const_lv1_1))) then 
            in1_blk_n_R <= m_axi_in1_RVALID;
        else 
            in1_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    in1_offset1_fu_109_p4 <= in1_offset(31 downto 2);
    weight_1_ack_in <= weight_1_state(1);
    weight_1_ack_out <= weight_TREADY;

    weight_1_data_out_assign_proc : process(weight_1_payload_A, weight_1_payload_B, weight_1_sel)
    begin
        if ((weight_1_sel = ap_const_logic_1)) then 
            weight_1_data_out <= weight_1_payload_B;
        else 
            weight_1_data_out <= weight_1_payload_A;
        end if; 
    end process;

    weight_1_load_A <= (weight_1_state_cmp_full and not(weight_1_sel_wr));
    weight_1_load_B <= (weight_1_state_cmp_full and weight_1_sel_wr);
    weight_1_sel <= weight_1_sel_rd;
    weight_1_state_cmp_full <= '0' when (weight_1_state = ap_const_lv2_1) else '1';

    weight_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln28_reg_157, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln28_reg_157 = ap_const_lv1_1))) then 
            weight_1_vld_in <= ap_const_logic_1;
        else 
            weight_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    weight_1_vld_out <= weight_1_state(0);
    weight_TDATA <= weight_1_data_out;

    weight_TDATA_blk_n_assign_proc : process(weight_1_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln28_reg_157, ap_enable_reg_pp0_iter2, icmp_ln28_reg_157_pp0_iter1_reg)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln28_reg_157_pp0_iter1_reg = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln28_reg_157 = ap_const_lv1_1)))) then 
            weight_TDATA_blk_n <= weight_1_state(1);
        else 
            weight_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    weight_TVALID <= weight_1_state(0);
    zext_ln28_fu_130_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_98),32));
end behav;
