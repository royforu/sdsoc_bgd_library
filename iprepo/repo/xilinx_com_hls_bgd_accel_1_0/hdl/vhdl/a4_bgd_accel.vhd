-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity a4_bgd_accel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    valData_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    valData_TVALID : IN STD_LOGIC;
    valData_TREADY : OUT STD_LOGIC;
    valWeight_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    valWeight_TVALID : IN STD_LOGIC;
    valWeight_TREADY : OUT STD_LOGIC;
    valGradient_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    valGradient_TVALID : OUT STD_LOGIC;
    valGradient_TREADY : IN STD_LOGIC );
end;


architecture behav of a4_bgd_accel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "a4_bgd_accel,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045-ffg900-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.321000,HLS_SYN_LAT=780219707,HLS_SYN_TPT=none,HLS_SYN_MEM=40,HLS_SYN_DSP=172,HLS_SYN_FF=34523,HLS_SYN_LUT=44680,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_pp1_stage2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv13_1EAA : STD_LOGIC_VECTOR (12 downto 0) := "1111010101010";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_311 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100010001";
    constant ap_const_lv12_FA0 : STD_LOGIC_VECTOR (11 downto 0) := "111110100000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv10_31B : STD_LOGIC_VECTOR (9 downto 0) := "1100011011";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_31B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100011011";
    constant ap_const_lv11_7F6 : STD_LOGIC_VECTOR (10 downto 0) := "11111110110";
    constant ap_const_lv12_311 : STD_LOGIC_VECTOR (11 downto 0) := "001100010001";
    constant ap_const_lv12_622 : STD_LOGIC_VECTOR (11 downto 0) := "011000100010";
    constant ap_const_lv13_933 : STD_LOGIC_VECTOR (12 downto 0) := "0100100110011";
    constant ap_const_lv13_C44 : STD_LOGIC_VECTOR (12 downto 0) := "0110001000100";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv14_311 : STD_LOGIC_VECTOR (13 downto 0) := "00001100010001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal valData_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal valData_0_vld_in : STD_LOGIC;
    signal valData_0_vld_out : STD_LOGIC;
    signal valData_0_ack_in : STD_LOGIC;
    signal valData_0_ack_out : STD_LOGIC;
    signal valData_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal valData_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal valData_0_sel_rd : STD_LOGIC := '0';
    signal valData_0_sel_wr : STD_LOGIC := '0';
    signal valData_0_sel : STD_LOGIC;
    signal valData_0_load_A : STD_LOGIC;
    signal valData_0_load_B : STD_LOGIC;
    signal valData_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal valData_0_state_cmp_full : STD_LOGIC;
    signal valWeight_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal valWeight_0_vld_in : STD_LOGIC;
    signal valWeight_0_vld_out : STD_LOGIC;
    signal valWeight_0_ack_in : STD_LOGIC;
    signal valWeight_0_ack_out : STD_LOGIC;
    signal valWeight_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal valWeight_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal valWeight_0_sel_rd : STD_LOGIC := '0';
    signal valWeight_0_sel_wr : STD_LOGIC := '0';
    signal valWeight_0_sel : STD_LOGIC;
    signal valWeight_0_load_A : STD_LOGIC;
    signal valWeight_0_load_B : STD_LOGIC;
    signal valWeight_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal valWeight_0_state_cmp_full : STD_LOGIC;
    signal valGradient_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal valGradient_1_vld_in : STD_LOGIC;
    signal valGradient_1_vld_out : STD_LOGIC;
    signal valGradient_1_ack_in : STD_LOGIC;
    signal valGradient_1_ack_out : STD_LOGIC;
    signal valGradient_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal valGradient_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal valGradient_1_sel_rd : STD_LOGIC := '0';
    signal valGradient_1_sel_wr : STD_LOGIC := '0';
    signal valGradient_1_sel : STD_LOGIC;
    signal valGradient_1_load_A : STD_LOGIC;
    signal valGradient_1_load_B : STD_LOGIC;
    signal valGradient_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal valGradient_1_state_cmp_full : STD_LOGIC;
    signal valData_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal icmp_ln424_reg_799 : STD_LOGIC_VECTOR (0 downto 0);
    signal valWeight_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln397_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal valGradient_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal icmp_ln461_reg_903 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln461_reg_903_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal icmp_ln461_reg_903_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_0_reg_282 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_293 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_0_reg_304 : STD_LOGIC_VECTOR (12 downto 0);
    signal j3_0_reg_326 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop1_0_reg_337 : STD_LOGIC_VECTOR (9 downto 0);
    signal loop4_0_reg_360 : STD_LOGIC_VECTOR (12 downto 0);
    signal i5_0_reg_371 : STD_LOGIC_VECTOR (31 downto 0);
    signal j6_0_reg_382 : STD_LOGIC_VECTOR (31 downto 0);
    signal fltLabel_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_444 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal icmp_ln397_reg_756 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal loop_fu_459_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln401_fu_485_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln401_reg_765 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln401_1_fu_489_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln401_1_reg_770 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln409_fu_497_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln409_reg_775 : STD_LOGIC_VECTOR (13 downto 0);
    signal valWeight_read_reg_780 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_501_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln421_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ch_fu_518_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ch_reg_794 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln424_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state6_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal loop_2_fu_530_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal loop_2_reg_803 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln430_fu_542_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln430_reg_808 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln435_fu_550_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln435_reg_815 : STD_LOGIC_VECTOR (10 downto 0);
    signal valData_read_reg_820 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state7_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal icmp_ln436_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln436_reg_826 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln439_fu_559_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln439_reg_830 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln439_2_fu_569_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln439_2_reg_835 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln439_1_fu_584_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln439_1_reg_840 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_pp1_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage2 : signal is "none";
    signal ap_block_state8_pp1_stage2_iter0 : BOOLEAN;
    signal ap_block_pp1_stage2_11001 : BOOLEAN;
    signal j_2_fu_608_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_reg_845 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln448_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln451_fu_634_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln451_reg_858 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_bgd_func0_fu_433_ap_ready : STD_LOGIC;
    signal grp_bgd_func0_fu_433_ap_done : STD_LOGIC;
    signal add_ln453_fu_645_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln453_reg_868 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_bgd_func1_fu_423_ap_ready : STD_LOGIC;
    signal grp_bgd_func1_fu_423_ap_done : STD_LOGIC;
    signal add_ln454_fu_656_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln454_reg_878 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_bgd_func2_fu_403_ap_ready : STD_LOGIC;
    signal grp_bgd_func2_fu_403_ap_done : STD_LOGIC;
    signal add_ln455_fu_667_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln455_reg_888 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_bgd_func3_fu_413_ap_ready : STD_LOGIC;
    signal grp_bgd_func3_fu_413_ap_done : STD_LOGIC;
    signal cla_fu_678_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal cla_reg_898 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln461_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state22_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state23_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state24_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state24_io : BOOLEAN;
    signal ap_block_state25_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state25_io : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal loop_1_fu_690_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal select_ln465_fu_708_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln465_reg_912 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln472_fu_716_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln472_reg_917 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln472_1_fu_728_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln472_1_reg_922 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_1_fu_732_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal fltGradient_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage2_subdone : BOOLEAN;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state22 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal fltData_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal fltData_ce0 : STD_LOGIC;
    signal fltData_we0 : STD_LOGIC;
    signal fltData_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fltData_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fltData_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal fltData_ce1 : STD_LOGIC;
    signal fltData_we1 : STD_LOGIC;
    signal fltData_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal fltLabel_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal fltLabel_ce0 : STD_LOGIC;
    signal fltLabel_we0 : STD_LOGIC;
    signal fltWeight_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal fltWeight_ce0 : STD_LOGIC;
    signal fltWeight_we0 : STD_LOGIC;
    signal fltWeight_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fltGradient_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal fltGradient_ce0 : STD_LOGIC;
    signal fltGradient_we0 : STD_LOGIC;
    signal fltGradient_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bgd_func4_fu_393_ap_start : STD_LOGIC;
    signal grp_bgd_func4_fu_393_ap_done : STD_LOGIC;
    signal grp_bgd_func4_fu_393_ap_idle : STD_LOGIC;
    signal grp_bgd_func4_fu_393_ap_ready : STD_LOGIC;
    signal grp_bgd_func4_fu_393_pfltWeight_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_bgd_func4_fu_393_pfltWeight_ce0 : STD_LOGIC;
    signal grp_bgd_func4_fu_393_pfltData_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_bgd_func4_fu_393_pfltData_ce0 : STD_LOGIC;
    signal grp_bgd_func4_fu_393_pfltGradient_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_bgd_func4_fu_393_pfltGradient_ce0 : STD_LOGIC;
    signal grp_bgd_func4_fu_393_pfltGradient_we0 : STD_LOGIC;
    signal grp_bgd_func4_fu_393_pfltGradient_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bgd_func2_fu_403_ap_start : STD_LOGIC;
    signal grp_bgd_func2_fu_403_ap_idle : STD_LOGIC;
    signal grp_bgd_func2_fu_403_pfltWeight_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_bgd_func2_fu_403_pfltWeight_ce0 : STD_LOGIC;
    signal grp_bgd_func2_fu_403_pfltData_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_bgd_func2_fu_403_pfltData_ce0 : STD_LOGIC;
    signal grp_bgd_func2_fu_403_pfltGradient_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_bgd_func2_fu_403_pfltGradient_ce0 : STD_LOGIC;
    signal grp_bgd_func2_fu_403_pfltGradient_we0 : STD_LOGIC;
    signal grp_bgd_func2_fu_403_pfltGradient_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bgd_func3_fu_413_ap_start : STD_LOGIC;
    signal grp_bgd_func3_fu_413_ap_idle : STD_LOGIC;
    signal grp_bgd_func3_fu_413_pfltWeight_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_bgd_func3_fu_413_pfltWeight_ce0 : STD_LOGIC;
    signal grp_bgd_func3_fu_413_pfltData_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_bgd_func3_fu_413_pfltData_ce0 : STD_LOGIC;
    signal grp_bgd_func3_fu_413_pfltGradient_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_bgd_func3_fu_413_pfltGradient_ce0 : STD_LOGIC;
    signal grp_bgd_func3_fu_413_pfltGradient_we0 : STD_LOGIC;
    signal grp_bgd_func3_fu_413_pfltGradient_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bgd_func1_fu_423_ap_start : STD_LOGIC;
    signal grp_bgd_func1_fu_423_ap_idle : STD_LOGIC;
    signal grp_bgd_func1_fu_423_pfltWeight_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_bgd_func1_fu_423_pfltWeight_ce0 : STD_LOGIC;
    signal grp_bgd_func1_fu_423_pfltData_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_bgd_func1_fu_423_pfltData_ce0 : STD_LOGIC;
    signal grp_bgd_func1_fu_423_pfltGradient_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_bgd_func1_fu_423_pfltGradient_ce0 : STD_LOGIC;
    signal grp_bgd_func1_fu_423_pfltGradient_we0 : STD_LOGIC;
    signal grp_bgd_func1_fu_423_pfltGradient_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bgd_func0_fu_433_ap_start : STD_LOGIC;
    signal grp_bgd_func0_fu_433_ap_idle : STD_LOGIC;
    signal grp_bgd_func0_fu_433_pfltWeight_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_bgd_func0_fu_433_pfltWeight_ce0 : STD_LOGIC;
    signal grp_bgd_func0_fu_433_pfltData_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_bgd_func0_fu_433_pfltData_ce0 : STD_LOGIC;
    signal grp_bgd_func0_fu_433_pfltGradient_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_bgd_func0_fu_433_pfltGradient_ce0 : STD_LOGIC;
    signal grp_bgd_func0_fu_433_pfltGradient_we0 : STD_LOGIC;
    signal grp_bgd_func0_fu_433_pfltGradient_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_i_0_phi_fu_297_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_0_reg_315 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_phi_mux_j3_0_phi_fu_330_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_loop1_0_phi_fu_341_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal cla_0_reg_348 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_phi_mux_i5_0_phi_fu_375_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bgd_func4_fu_393_ap_start_reg : STD_LOGIC := '0';
    signal grp_bgd_func2_fu_403_ap_start_reg : STD_LOGIC := '0';
    signal grp_bgd_func3_fu_413_ap_start_reg : STD_LOGIC := '0';
    signal grp_bgd_func1_fu_423_ap_start_reg : STD_LOGIC := '0';
    signal grp_bgd_func0_fu_433_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln409_fu_507_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln439_fu_564_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln439_3_fu_579_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln439_4_fu_592_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage2 : BOOLEAN;
    signal sext_ln439_fu_603_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln439_1_fu_618_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln448_fu_623_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln451_fu_640_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln453_fu_651_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln454_fu_662_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln455_fu_673_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln472_fu_738_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp2_stage0_01001 : BOOLEAN;
    signal icmp_ln401_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln401_fu_477_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_471_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_742_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln430_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln439_1_fu_573_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln439_2_fu_587_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln439_3_fu_597_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln439_4_fu_613_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln465_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_702_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln465_1_fu_720_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_749_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_742_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_749_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_block_state26 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;

    component a4_bgd_func4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        vfltLabel : IN STD_LOGIC_VECTOR (31 downto 0);
        pfltWeight_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        pfltWeight_ce0 : OUT STD_LOGIC;
        pfltWeight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pfltWeight_offset : IN STD_LOGIC_VECTOR (3 downto 0);
        pfltData_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        pfltData_ce0 : OUT STD_LOGIC;
        pfltData_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pfltGradient_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        pfltGradient_ce0 : OUT STD_LOGIC;
        pfltGradient_we0 : OUT STD_LOGIC;
        pfltGradient_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        pfltGradient_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component a4_bgd_func2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        vfltLabel : IN STD_LOGIC_VECTOR (31 downto 0);
        pfltWeight_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        pfltWeight_ce0 : OUT STD_LOGIC;
        pfltWeight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pfltWeight_offset : IN STD_LOGIC_VECTOR (3 downto 0);
        pfltData_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        pfltData_ce0 : OUT STD_LOGIC;
        pfltData_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pfltGradient_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        pfltGradient_ce0 : OUT STD_LOGIC;
        pfltGradient_we0 : OUT STD_LOGIC;
        pfltGradient_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        pfltGradient_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component a4_bgd_func3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        vfltLabel : IN STD_LOGIC_VECTOR (31 downto 0);
        pfltWeight_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        pfltWeight_ce0 : OUT STD_LOGIC;
        pfltWeight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pfltWeight_offset : IN STD_LOGIC_VECTOR (3 downto 0);
        pfltData_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        pfltData_ce0 : OUT STD_LOGIC;
        pfltData_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pfltGradient_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        pfltGradient_ce0 : OUT STD_LOGIC;
        pfltGradient_we0 : OUT STD_LOGIC;
        pfltGradient_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        pfltGradient_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component a4_bgd_func1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        vfltLabel : IN STD_LOGIC_VECTOR (31 downto 0);
        pfltWeight_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        pfltWeight_ce0 : OUT STD_LOGIC;
        pfltWeight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pfltWeight_offset : IN STD_LOGIC_VECTOR (3 downto 0);
        pfltData_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        pfltData_ce0 : OUT STD_LOGIC;
        pfltData_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pfltGradient_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        pfltGradient_ce0 : OUT STD_LOGIC;
        pfltGradient_we0 : OUT STD_LOGIC;
        pfltGradient_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        pfltGradient_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component a4_bgd_func0 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        vfltLabel : IN STD_LOGIC_VECTOR (31 downto 0);
        pfltWeight_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        pfltWeight_ce0 : OUT STD_LOGIC;
        pfltWeight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pfltWeight_offset : IN STD_LOGIC_VECTOR (3 downto 0);
        pfltData_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        pfltData_ce0 : OUT STD_LOGIC;
        pfltData_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pfltGradient_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        pfltGradient_ce0 : OUT STD_LOGIC;
        pfltGradient_we0 : OUT STD_LOGIC;
        pfltGradient_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        pfltGradient_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component a4_bgd_accel_mac_muladd_11ns_14s_14ns_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component a4_bgd_accel_fltData IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component a4_bgd_accel_fltLabel IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component a4_bgd_accel_fltWeight IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fltData_U : component a4_bgd_accel_fltData
    generic map (
        DataWidth => 32,
        AddressRange => 3925,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => fltData_address0,
        ce0 => fltData_ce0,
        we0 => fltData_we0,
        d0 => fltData_d0,
        q0 => fltData_q0,
        address1 => fltData_address1,
        ce1 => fltData_ce1,
        we1 => fltData_we1,
        d1 => fltData_d1);

    fltLabel_U : component a4_bgd_accel_fltLabel
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => fltLabel_address0,
        ce0 => fltLabel_ce0,
        we0 => fltLabel_we0,
        d0 => valData_0_data_out,
        q0 => fltLabel_q0);

    fltWeight_U : component a4_bgd_accel_fltWeight
    generic map (
        DataWidth => 32,
        AddressRange => 7850,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => fltWeight_address0,
        ce0 => fltWeight_ce0,
        we0 => fltWeight_we0,
        d0 => valWeight_read_reg_780,
        q0 => fltWeight_q0);

    fltGradient_U : component a4_bgd_accel_fltWeight
    generic map (
        DataWidth => 32,
        AddressRange => 7850,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => fltGradient_address0,
        ce0 => fltGradient_ce0,
        we0 => fltGradient_we0,
        d0 => fltGradient_d0,
        q0 => fltGradient_q0);

    grp_bgd_func4_fu_393 : component a4_bgd_func4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_bgd_func4_fu_393_ap_start,
        ap_done => grp_bgd_func4_fu_393_ap_done,
        ap_idle => grp_bgd_func4_fu_393_ap_idle,
        ap_ready => grp_bgd_func4_fu_393_ap_ready,
        vfltLabel => reg_444,
        pfltWeight_address0 => grp_bgd_func4_fu_393_pfltWeight_address0,
        pfltWeight_ce0 => grp_bgd_func4_fu_393_pfltWeight_ce0,
        pfltWeight_q0 => fltWeight_q0,
        pfltWeight_offset => add_ln455_reg_888,
        pfltData_address0 => grp_bgd_func4_fu_393_pfltData_address0,
        pfltData_ce0 => grp_bgd_func4_fu_393_pfltData_ce0,
        pfltData_q0 => fltData_q0,
        pfltGradient_address0 => grp_bgd_func4_fu_393_pfltGradient_address0,
        pfltGradient_ce0 => grp_bgd_func4_fu_393_pfltGradient_ce0,
        pfltGradient_we0 => grp_bgd_func4_fu_393_pfltGradient_we0,
        pfltGradient_d0 => grp_bgd_func4_fu_393_pfltGradient_d0,
        pfltGradient_q0 => fltGradient_q0);

    grp_bgd_func2_fu_403 : component a4_bgd_func2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_bgd_func2_fu_403_ap_start,
        ap_done => grp_bgd_func2_fu_403_ap_done,
        ap_idle => grp_bgd_func2_fu_403_ap_idle,
        ap_ready => grp_bgd_func2_fu_403_ap_ready,
        vfltLabel => reg_444,
        pfltWeight_address0 => grp_bgd_func2_fu_403_pfltWeight_address0,
        pfltWeight_ce0 => grp_bgd_func2_fu_403_pfltWeight_ce0,
        pfltWeight_q0 => fltWeight_q0,
        pfltWeight_offset => add_ln453_reg_868,
        pfltData_address0 => grp_bgd_func2_fu_403_pfltData_address0,
        pfltData_ce0 => grp_bgd_func2_fu_403_pfltData_ce0,
        pfltData_q0 => fltData_q0,
        pfltGradient_address0 => grp_bgd_func2_fu_403_pfltGradient_address0,
        pfltGradient_ce0 => grp_bgd_func2_fu_403_pfltGradient_ce0,
        pfltGradient_we0 => grp_bgd_func2_fu_403_pfltGradient_we0,
        pfltGradient_d0 => grp_bgd_func2_fu_403_pfltGradient_d0,
        pfltGradient_q0 => fltGradient_q0);

    grp_bgd_func3_fu_413 : component a4_bgd_func3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_bgd_func3_fu_413_ap_start,
        ap_done => grp_bgd_func3_fu_413_ap_done,
        ap_idle => grp_bgd_func3_fu_413_ap_idle,
        ap_ready => grp_bgd_func3_fu_413_ap_ready,
        vfltLabel => reg_444,
        pfltWeight_address0 => grp_bgd_func3_fu_413_pfltWeight_address0,
        pfltWeight_ce0 => grp_bgd_func3_fu_413_pfltWeight_ce0,
        pfltWeight_q0 => fltWeight_q0,
        pfltWeight_offset => add_ln454_reg_878,
        pfltData_address0 => grp_bgd_func3_fu_413_pfltData_address0,
        pfltData_ce0 => grp_bgd_func3_fu_413_pfltData_ce0,
        pfltData_q0 => fltData_q0,
        pfltGradient_address0 => grp_bgd_func3_fu_413_pfltGradient_address0,
        pfltGradient_ce0 => grp_bgd_func3_fu_413_pfltGradient_ce0,
        pfltGradient_we0 => grp_bgd_func3_fu_413_pfltGradient_we0,
        pfltGradient_d0 => grp_bgd_func3_fu_413_pfltGradient_d0,
        pfltGradient_q0 => fltGradient_q0);

    grp_bgd_func1_fu_423 : component a4_bgd_func1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_bgd_func1_fu_423_ap_start,
        ap_done => grp_bgd_func1_fu_423_ap_done,
        ap_idle => grp_bgd_func1_fu_423_ap_idle,
        ap_ready => grp_bgd_func1_fu_423_ap_ready,
        vfltLabel => reg_444,
        pfltWeight_address0 => grp_bgd_func1_fu_423_pfltWeight_address0,
        pfltWeight_ce0 => grp_bgd_func1_fu_423_pfltWeight_ce0,
        pfltWeight_q0 => fltWeight_q0,
        pfltWeight_offset => add_ln451_reg_858,
        pfltData_address0 => grp_bgd_func1_fu_423_pfltData_address0,
        pfltData_ce0 => grp_bgd_func1_fu_423_pfltData_ce0,
        pfltData_q0 => fltData_q0,
        pfltGradient_address0 => grp_bgd_func1_fu_423_pfltGradient_address0,
        pfltGradient_ce0 => grp_bgd_func1_fu_423_pfltGradient_ce0,
        pfltGradient_we0 => grp_bgd_func1_fu_423_pfltGradient_we0,
        pfltGradient_d0 => grp_bgd_func1_fu_423_pfltGradient_d0,
        pfltGradient_q0 => fltGradient_q0);

    grp_bgd_func0_fu_433 : component a4_bgd_func0
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_bgd_func0_fu_433_ap_start,
        ap_done => grp_bgd_func0_fu_433_ap_done,
        ap_idle => grp_bgd_func0_fu_433_ap_idle,
        ap_ready => grp_bgd_func0_fu_433_ap_ready,
        vfltLabel => reg_444,
        pfltWeight_address0 => grp_bgd_func0_fu_433_pfltWeight_address0,
        pfltWeight_ce0 => grp_bgd_func0_fu_433_pfltWeight_ce0,
        pfltWeight_q0 => fltWeight_q0,
        pfltWeight_offset => cla_0_reg_348,
        pfltData_address0 => grp_bgd_func0_fu_433_pfltData_address0,
        pfltData_ce0 => grp_bgd_func0_fu_433_pfltData_ce0,
        pfltData_q0 => fltData_q0,
        pfltGradient_address0 => grp_bgd_func0_fu_433_pfltGradient_address0,
        pfltGradient_ce0 => grp_bgd_func0_fu_433_pfltGradient_ce0,
        pfltGradient_we0 => grp_bgd_func0_fu_433_pfltGradient_we0,
        pfltGradient_d0 => grp_bgd_func0_fu_433_pfltGradient_d0,
        pfltGradient_q0 => fltGradient_q0);

    bgd_accel_mac_muladd_11ns_14s_14ns_14_1_1_U69 : component a4_bgd_accel_mac_muladd_11ns_14s_14ns_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 14,
        din2_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        din0 => grp_fu_742_p0,
        din1 => trunc_ln409_reg_775,
        din2 => trunc_ln401_reg_765,
        dout => grp_fu_742_p3);

    bgd_accel_mac_muladd_11ns_14s_14ns_14_1_1_U70 : component a4_bgd_accel_mac_muladd_11ns_14s_14ns_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 14,
        din2_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        din0 => grp_fu_749_p0,
        din1 => trunc_ln472_reg_917,
        din2 => trunc_ln472_1_reg_922,
        dout => grp_fu_749_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln421_fu_512_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp1_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((icmp_ln421_fu_512_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state22) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln421_fu_512_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state22)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state22);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                elsif (((icmp_ln421_fu_512_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_bgd_func0_fu_433_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_bgd_func0_fu_433_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    grp_bgd_func0_fu_433_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bgd_func0_fu_433_ap_ready = ap_const_logic_1)) then 
                    grp_bgd_func0_fu_433_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_bgd_func1_fu_423_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_bgd_func1_fu_423_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    grp_bgd_func1_fu_423_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bgd_func1_fu_423_ap_ready = ap_const_logic_1)) then 
                    grp_bgd_func1_fu_423_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_bgd_func2_fu_403_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_bgd_func2_fu_403_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    grp_bgd_func2_fu_403_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bgd_func2_fu_403_ap_ready = ap_const_logic_1)) then 
                    grp_bgd_func2_fu_403_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_bgd_func3_fu_413_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_bgd_func3_fu_413_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    grp_bgd_func3_fu_413_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bgd_func3_fu_413_ap_ready = ap_const_logic_1)) then 
                    grp_bgd_func3_fu_413_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_bgd_func4_fu_393_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_bgd_func4_fu_393_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    grp_bgd_func4_fu_393_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bgd_func4_fu_393_ap_ready = ap_const_logic_1)) then 
                    grp_bgd_func4_fu_393_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    valData_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                valData_0_sel_rd <= ap_const_logic_0;
            else
                if (((valData_0_ack_out = ap_const_logic_1) and (valData_0_vld_out = ap_const_logic_1))) then 
                                        valData_0_sel_rd <= not(valData_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    valData_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                valData_0_sel_wr <= ap_const_logic_0;
            else
                if (((valData_0_ack_in = ap_const_logic_1) and (valData_0_vld_in = ap_const_logic_1))) then 
                                        valData_0_sel_wr <= not(valData_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    valData_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                valData_0_state <= ap_const_lv2_0;
            else
                if ((((valData_0_state = ap_const_lv2_2) and (valData_0_vld_in = ap_const_logic_0)) or ((valData_0_state = ap_const_lv2_3) and (valData_0_vld_in = ap_const_logic_0) and (valData_0_ack_out = ap_const_logic_1)))) then 
                    valData_0_state <= ap_const_lv2_2;
                elsif ((((valData_0_state = ap_const_lv2_1) and (valData_0_ack_out = ap_const_logic_0)) or ((valData_0_state = ap_const_lv2_3) and (valData_0_ack_out = ap_const_logic_0) and (valData_0_vld_in = ap_const_logic_1)))) then 
                    valData_0_state <= ap_const_lv2_1;
                elsif (((not(((valData_0_vld_in = ap_const_logic_0) and (valData_0_ack_out = ap_const_logic_1))) and not(((valData_0_ack_out = ap_const_logic_0) and (valData_0_vld_in = ap_const_logic_1))) and (valData_0_state = ap_const_lv2_3)) or ((valData_0_state = ap_const_lv2_1) and (valData_0_ack_out = ap_const_logic_1)) or ((valData_0_state = ap_const_lv2_2) and (valData_0_vld_in = ap_const_logic_1)))) then 
                    valData_0_state <= ap_const_lv2_3;
                else 
                    valData_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    valGradient_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                valGradient_1_sel_rd <= ap_const_logic_0;
            else
                if (((valGradient_1_ack_out = ap_const_logic_1) and (valGradient_1_vld_out = ap_const_logic_1))) then 
                                        valGradient_1_sel_rd <= not(valGradient_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    valGradient_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                valGradient_1_sel_wr <= ap_const_logic_0;
            else
                if (((valGradient_1_ack_in = ap_const_logic_1) and (valGradient_1_vld_in = ap_const_logic_1))) then 
                                        valGradient_1_sel_wr <= not(valGradient_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    valGradient_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                valGradient_1_state <= ap_const_lv2_0;
            else
                if ((((valGradient_1_state = ap_const_lv2_2) and (valGradient_1_vld_in = ap_const_logic_0)) or ((valGradient_1_state = ap_const_lv2_3) and (valGradient_1_vld_in = ap_const_logic_0) and (valGradient_1_ack_out = ap_const_logic_1)))) then 
                    valGradient_1_state <= ap_const_lv2_2;
                elsif ((((valGradient_1_state = ap_const_lv2_1) and (valGradient_TREADY = ap_const_logic_0)) or ((valGradient_1_state = ap_const_lv2_3) and (valGradient_TREADY = ap_const_logic_0) and (valGradient_1_vld_in = ap_const_logic_1)))) then 
                    valGradient_1_state <= ap_const_lv2_1;
                elsif (((not(((valGradient_1_vld_in = ap_const_logic_0) and (valGradient_1_ack_out = ap_const_logic_1))) and not(((valGradient_TREADY = ap_const_logic_0) and (valGradient_1_vld_in = ap_const_logic_1))) and (valGradient_1_state = ap_const_lv2_3)) or ((valGradient_1_state = ap_const_lv2_1) and (valGradient_1_ack_out = ap_const_logic_1)) or ((valGradient_1_state = ap_const_lv2_2) and (valGradient_1_vld_in = ap_const_logic_1)))) then 
                    valGradient_1_state <= ap_const_lv2_3;
                else 
                    valGradient_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    valWeight_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                valWeight_0_sel_rd <= ap_const_logic_0;
            else
                if (((valWeight_0_ack_out = ap_const_logic_1) and (valWeight_0_vld_out = ap_const_logic_1))) then 
                                        valWeight_0_sel_rd <= not(valWeight_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    valWeight_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                valWeight_0_sel_wr <= ap_const_logic_0;
            else
                if (((valWeight_0_ack_in = ap_const_logic_1) and (valWeight_0_vld_in = ap_const_logic_1))) then 
                                        valWeight_0_sel_wr <= not(valWeight_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    valWeight_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                valWeight_0_state <= ap_const_lv2_0;
            else
                if ((((valWeight_0_state = ap_const_lv2_2) and (valWeight_0_vld_in = ap_const_logic_0)) or ((valWeight_0_state = ap_const_lv2_3) and (valWeight_0_vld_in = ap_const_logic_0) and (valWeight_0_ack_out = ap_const_logic_1)))) then 
                    valWeight_0_state <= ap_const_lv2_2;
                elsif ((((valWeight_0_state = ap_const_lv2_1) and (valWeight_0_ack_out = ap_const_logic_0)) or ((valWeight_0_state = ap_const_lv2_3) and (valWeight_0_ack_out = ap_const_logic_0) and (valWeight_0_vld_in = ap_const_logic_1)))) then 
                    valWeight_0_state <= ap_const_lv2_1;
                elsif (((not(((valWeight_0_vld_in = ap_const_logic_0) and (valWeight_0_ack_out = ap_const_logic_1))) and not(((valWeight_0_ack_out = ap_const_logic_0) and (valWeight_0_vld_in = ap_const_logic_1))) and (valWeight_0_state = ap_const_lv2_3)) or ((valWeight_0_state = ap_const_lv2_1) and (valWeight_0_ack_out = ap_const_logic_1)) or ((valWeight_0_state = ap_const_lv2_2) and (valWeight_0_vld_in = ap_const_logic_1)))) then 
                    valWeight_0_state <= ap_const_lv2_3;
                else 
                    valWeight_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ch_0_reg_315_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                ch_0_reg_315 <= ap_const_lv12_0;
            elsif (((icmp_ln448_fu_628_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                ch_0_reg_315 <= ch_reg_794;
            end if; 
        end if;
    end process;

    cla_0_reg_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                cla_0_reg_348 <= ap_const_lv4_0;
            elsif (((grp_bgd_func4_fu_393_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                cla_0_reg_348 <= cla_reg_898;
            end if; 
        end if;
    end process;

    i5_0_reg_371_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln421_fu_512_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i5_0_reg_371 <= ap_const_lv32_0;
            elsif (((icmp_ln461_reg_903 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                i5_0_reg_371 <= select_ln465_reg_912;
            end if; 
        end if;
    end process;

    i_0_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln397_reg_756 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_reg_293 <= select_ln401_1_reg_770;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_293 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    j3_0_reg_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln424_reg_799 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                j3_0_reg_326 <= j_2_reg_845;
            elsif (((icmp_ln421_fu_512_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j3_0_reg_326 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    j6_0_reg_382_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln421_fu_512_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j6_0_reg_382 <= ap_const_lv32_0;
            elsif (((icmp_ln461_fu_684_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                j6_0_reg_382 <= j_1_fu_732_p2;
            end if; 
        end if;
    end process;

    j_0_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln397_fu_453_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_0_reg_282 <= j_fu_501_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_reg_282 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    loop1_0_reg_337_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln424_reg_799 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                loop1_0_reg_337 <= loop_2_reg_803;
            elsif (((icmp_ln421_fu_512_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                loop1_0_reg_337 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    loop4_0_reg_360_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln421_fu_512_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                loop4_0_reg_360 <= ap_const_lv13_0;
            elsif (((icmp_ln461_fu_684_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                loop4_0_reg_360 <= loop_1_fu_690_p2;
            end if; 
        end if;
    end process;

    loop_0_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln397_fu_453_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                loop_0_reg_304 <= loop_fu_459_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                loop_0_reg_304 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln436_fu_554_p2 = ap_const_lv1_1) and (icmp_ln424_reg_799 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then
                add_ln439_reg_830 <= add_ln439_fu_559_p2;
                    zext_ln439_2_reg_835(10 downto 0) <= zext_ln439_2_fu_569_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_bgd_func0_fu_433_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                add_ln451_reg_858 <= add_ln451_fu_634_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_bgd_func1_fu_423_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                add_ln453_reg_868 <= add_ln453_fu_645_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_bgd_func2_fu_403_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                add_ln454_reg_878 <= add_ln454_fu_656_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_bgd_func3_fu_413_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                add_ln455_reg_888 <= add_ln455_fu_667_p2;
                cla_reg_898 <= cla_fu_678_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                ch_reg_794 <= ch_fu_518_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln397_reg_756 <= icmp_ln397_fu_453_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln424_reg_799 <= icmp_ln424_fu_524_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln424_reg_799 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then
                icmp_ln436_reg_826 <= icmp_ln436_fu_554_p2;
                valData_read_reg_820 <= valData_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln461_reg_903 <= icmp_ln461_fu_684_p2;
                icmp_ln461_reg_903_pp2_iter1_reg <= icmp_ln461_reg_903;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                icmp_ln461_reg_903_pp2_iter2_reg <= icmp_ln461_reg_903_pp2_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln424_reg_799 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                j_2_reg_845 <= j_2_fu_608_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                loop_2_reg_803 <= loop_2_fu_530_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_444 <= fltLabel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln397_fu_453_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln401_1_reg_770 <= select_ln401_1_fu_489_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln424_fu_524_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                select_ln430_reg_808 <= select_ln430_fu_542_p3;
                trunc_ln435_reg_815 <= trunc_ln435_fu_550_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln461_fu_684_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                select_ln465_reg_912 <= select_ln465_fu_708_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln397_fu_453_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln401_reg_765 <= trunc_ln401_fu_485_p1;
                trunc_ln409_reg_775 <= trunc_ln409_fu_497_p1;
                valWeight_read_reg_780 <= valWeight_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln461_fu_684_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                trunc_ln472_1_reg_922 <= trunc_ln472_1_fu_728_p1;
                trunc_ln472_reg_917 <= trunc_ln472_fu_716_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((valData_0_load_A = ap_const_logic_1)) then
                valData_0_payload_A <= valData_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((valData_0_load_B = ap_const_logic_1)) then
                valData_0_payload_B <= valData_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((valGradient_1_load_A = ap_const_logic_1)) then
                valGradient_1_payload_A <= fltGradient_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((valGradient_1_load_B = ap_const_logic_1)) then
                valGradient_1_payload_B <= fltGradient_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((valWeight_0_load_A = ap_const_logic_1)) then
                valWeight_0_payload_A <= valWeight_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((valWeight_0_load_B = ap_const_logic_1)) then
                valWeight_0_payload_B <= valWeight_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln436_reg_826 = ap_const_lv1_1) and (icmp_ln424_reg_799 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then
                    zext_ln439_1_reg_840(10 downto 0) <= zext_ln439_1_fu_584_p1(10 downto 0);
            end if;
        end if;
    end process;
    zext_ln439_2_reg_835(11) <= '0';
    zext_ln439_1_reg_840(12 downto 11) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, valGradient_TREADY, valGradient_1_state, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter0, icmp_ln397_fu_453_p2, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, icmp_ln421_fu_512_p2, ap_CS_fsm_state5, icmp_ln424_fu_524_p2, ap_CS_fsm_state11, icmp_ln448_fu_628_p2, ap_CS_fsm_state13, grp_bgd_func0_fu_433_ap_done, ap_CS_fsm_state15, grp_bgd_func1_fu_423_ap_done, ap_CS_fsm_state17, grp_bgd_func2_fu_403_ap_done, ap_CS_fsm_state19, grp_bgd_func3_fu_413_ap_done, icmp_ln461_fu_684_p2, ap_enable_reg_pp2_iter0, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_block_pp1_stage2_subdone, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, grp_bgd_func4_fu_393_ap_done, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_block_pp1_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln397_fu_453_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln397_fu_453_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln421_fu_512_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((icmp_ln424_fu_524_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((icmp_ln424_fu_524_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_pp1_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((icmp_ln448_fu_628_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((grp_bgd_func0_fu_433_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((grp_bgd_func1_fu_423_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((grp_bgd_func2_fu_403_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((grp_bgd_func3_fu_413_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((grp_bgd_func4_fu_393_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((icmp_ln461_fu_684_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((icmp_ln461_fu_684_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state26 => 
                if ((not(((valGradient_1_state = ap_const_lv2_1) or ((valGradient_1_state = ap_const_lv2_3) and (valGradient_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln439_1_fu_573_p2 <= std_logic_vector(unsigned(zext_ln439_2_fu_569_p1) + unsigned(ap_const_lv12_311));
    add_ln439_2_fu_587_p2 <= std_logic_vector(unsigned(zext_ln439_2_reg_835) + unsigned(ap_const_lv12_622));
    add_ln439_3_fu_597_p2 <= std_logic_vector(unsigned(zext_ln439_1_fu_584_p1) + unsigned(ap_const_lv13_933));
    add_ln439_4_fu_613_p2 <= std_logic_vector(unsigned(zext_ln439_1_reg_840) + unsigned(ap_const_lv13_C44));
    add_ln439_fu_559_p2 <= std_logic_vector(unsigned(trunc_ln435_reg_815) + unsigned(ap_const_lv11_7F6));
    add_ln451_fu_634_p2 <= std_logic_vector(unsigned(cla_0_reg_348) + unsigned(ap_const_lv4_1));
    add_ln453_fu_645_p2 <= std_logic_vector(unsigned(cla_0_reg_348) + unsigned(ap_const_lv4_2));
    add_ln454_fu_656_p2 <= std_logic_vector(unsigned(cla_0_reg_348) + unsigned(ap_const_lv4_3));
    add_ln455_fu_667_p2 <= std_logic_vector(unsigned(cla_0_reg_348) + unsigned(ap_const_lv4_4));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(5);
    ap_CS_fsm_pp1_stage2 <= ap_CS_fsm(6);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(19);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(7);
    ap_CS_fsm_state11 <= ap_CS_fsm(8);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(15);
    ap_CS_fsm_state19 <= ap_CS_fsm(16);
    ap_CS_fsm_state20 <= ap_CS_fsm(17);
    ap_CS_fsm_state21 <= ap_CS_fsm(18);
    ap_CS_fsm_state26 <= ap_CS_fsm(20);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(valWeight_0_vld_out, ap_enable_reg_pp0_iter0, icmp_ln397_fu_453_p2)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln397_fu_453_p2 = ap_const_lv1_0) and (valWeight_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(valWeight_0_vld_out, ap_enable_reg_pp0_iter0, icmp_ln397_fu_453_p2)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln397_fu_453_p2 = ap_const_lv1_0) and (valWeight_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage1_11001_assign_proc : process(valData_0_vld_out, ap_enable_reg_pp1_iter0, icmp_ln424_reg_799)
    begin
                ap_block_pp1_stage1_11001 <= ((icmp_ln424_reg_799 = ap_const_lv1_0) and (valData_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage1_subdone_assign_proc : process(valData_0_vld_out, ap_enable_reg_pp1_iter0, icmp_ln424_reg_799)
    begin
                ap_block_pp1_stage1_subdone <= ((icmp_ln424_reg_799 = ap_const_lv1_0) and (valData_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_block_state24_io, ap_block_state25_io)
    begin
                ap_block_pp2_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state25_io) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state24_io) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_block_state24_io, ap_block_state25_io)
    begin
                ap_block_pp2_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state25_io) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state24_io) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)));
    end process;

        ap_block_state22_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state24_io_assign_proc : process(valGradient_1_ack_in, icmp_ln461_reg_903_pp2_iter1_reg)
    begin
                ap_block_state24_io <= ((icmp_ln461_reg_903_pp2_iter1_reg = ap_const_lv1_0) and (valGradient_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state24_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state25_io_assign_proc : process(valGradient_1_ack_in, icmp_ln461_reg_903_pp2_iter2_reg)
    begin
                ap_block_state25_io <= ((icmp_ln461_reg_903_pp2_iter2_reg = ap_const_lv1_0) and (valGradient_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state25_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state26_assign_proc : process(valGradient_TREADY, valGradient_1_state)
    begin
                ap_block_state26 <= ((valGradient_1_state = ap_const_lv2_1) or ((valGradient_1_state = ap_const_lv2_3) and (valGradient_TREADY = ap_const_logic_0)));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(valWeight_0_vld_out, icmp_ln397_fu_453_p2)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((icmp_ln397_fu_453_p2 = ap_const_lv1_0) and (valWeight_0_vld_out = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp1_stage1_iter0_assign_proc : process(valData_0_vld_out, icmp_ln424_reg_799)
    begin
                ap_block_state7_pp1_stage1_iter0 <= ((icmp_ln424_reg_799 = ap_const_lv1_0) and (valData_0_vld_out = ap_const_logic_0));
    end process;

        ap_block_state8_pp1_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln397_fu_453_p2)
    begin
        if ((icmp_ln397_fu_453_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state6_assign_proc : process(icmp_ln424_fu_524_p2)
    begin
        if ((icmp_ln424_fu_524_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state22_assign_proc : process(icmp_ln461_fu_684_p2)
    begin
        if ((icmp_ln461_fu_684_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state22 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state22 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(valGradient_TREADY, valGradient_1_state, ap_CS_fsm_state26)
    begin
        if ((not(((valGradient_1_state = ap_const_lv2_1) or ((valGradient_1_state = ap_const_lv2_3) and (valGradient_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i5_0_phi_fu_375_p4_assign_proc : process(ap_block_pp2_stage0, icmp_ln461_reg_903, i5_0_reg_371, ap_CS_fsm_pp2_stage0, select_ln465_reg_912, ap_enable_reg_pp2_iter1)
    begin
        if (((icmp_ln461_reg_903 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_i5_0_phi_fu_375_p4 <= select_ln465_reg_912;
        else 
            ap_phi_mux_i5_0_phi_fu_375_p4 <= i5_0_reg_371;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_297_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_0_reg_293, icmp_ln397_reg_756, select_ln401_1_reg_770, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln397_reg_756 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_0_phi_fu_297_p4 <= select_ln401_1_reg_770;
        else 
            ap_phi_mux_i_0_phi_fu_297_p4 <= i_0_reg_293;
        end if; 
    end process;


    ap_phi_mux_j3_0_phi_fu_330_p4_assign_proc : process(icmp_ln424_reg_799, j3_0_reg_326, ap_CS_fsm_pp1_stage0, j_2_reg_845, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln424_reg_799 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_j3_0_phi_fu_330_p4 <= j_2_reg_845;
        else 
            ap_phi_mux_j3_0_phi_fu_330_p4 <= j3_0_reg_326;
        end if; 
    end process;


    ap_phi_mux_loop1_0_phi_fu_341_p4_assign_proc : process(icmp_ln424_reg_799, loop1_0_reg_337, ap_CS_fsm_pp1_stage0, loop_2_reg_803, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln424_reg_799 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_loop1_0_phi_fu_341_p4 <= loop_2_reg_803;
        else 
            ap_phi_mux_loop1_0_phi_fu_341_p4 <= loop1_0_reg_337;
        end if; 
    end process;


    ap_ready_assign_proc : process(valGradient_TREADY, valGradient_1_state, ap_CS_fsm_state26)
    begin
        if ((not(((valGradient_1_state = ap_const_lv2_1) or ((valGradient_1_state = ap_const_lv2_3) and (valGradient_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ch_fu_518_p2 <= std_logic_vector(unsigned(ch_0_reg_315) + unsigned(ap_const_lv12_1));
    cla_fu_678_p2 <= std_logic_vector(unsigned(cla_0_reg_348) + unsigned(ap_const_lv4_5));

    fltData_address0_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_block_pp1_stage1, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp1_stage2, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_enable_reg_pp1_iter1, grp_bgd_func4_fu_393_pfltData_address0, grp_bgd_func2_fu_403_pfltData_address0, grp_bgd_func3_fu_413_pfltData_address0, grp_bgd_func1_fu_423_pfltData_address0, grp_bgd_func0_fu_433_pfltData_address0, ap_block_pp1_stage0, ap_CS_fsm_state21, zext_ln439_fu_564_p1, ap_block_pp1_stage2, sext_ln439_fu_603_p1, sext_ln439_1_fu_618_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            fltData_address0 <= sext_ln439_1_fu_618_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            fltData_address0 <= sext_ln439_fu_603_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            fltData_address0 <= zext_ln439_fu_564_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            fltData_address0 <= grp_bgd_func0_fu_433_pfltData_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            fltData_address0 <= grp_bgd_func1_fu_423_pfltData_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            fltData_address0 <= grp_bgd_func3_fu_413_pfltData_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            fltData_address0 <= grp_bgd_func2_fu_403_pfltData_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            fltData_address0 <= grp_bgd_func4_fu_393_pfltData_address0;
        else 
            fltData_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    fltData_address1_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_block_pp1_stage1, ap_CS_fsm_pp1_stage2, zext_ln439_3_fu_579_p1, zext_ln439_4_fu_592_p1, ap_block_pp1_stage2)
    begin
        if ((ap_enable_reg_pp1_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then 
                fltData_address1 <= zext_ln439_4_fu_592_p1(12 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                fltData_address1 <= zext_ln439_3_fu_579_p1(12 - 1 downto 0);
            else 
                fltData_address1 <= "XXXXXXXXXXXX";
            end if;
        else 
            fltData_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    fltData_ce0_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_block_pp1_stage1_11001, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_11001, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_enable_reg_pp1_iter1, grp_bgd_func4_fu_393_pfltData_ce0, grp_bgd_func2_fu_403_pfltData_ce0, grp_bgd_func3_fu_413_pfltData_ce0, grp_bgd_func1_fu_423_pfltData_ce0, grp_bgd_func0_fu_433_pfltData_ce0, ap_CS_fsm_state21)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
            fltData_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            fltData_ce0 <= grp_bgd_func0_fu_433_pfltData_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            fltData_ce0 <= grp_bgd_func1_fu_423_pfltData_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            fltData_ce0 <= grp_bgd_func3_fu_413_pfltData_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            fltData_ce0 <= grp_bgd_func2_fu_403_pfltData_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            fltData_ce0 <= grp_bgd_func4_fu_393_pfltData_ce0;
        else 
            fltData_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fltData_ce1_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_block_pp1_stage1_11001, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
            fltData_ce1 <= ap_const_logic_1;
        else 
            fltData_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    fltData_d0_assign_proc : process(valData_0_data_out, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_block_pp1_stage1, ap_CS_fsm_pp1_stage0, valData_read_reg_820, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_block_pp1_stage2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            fltData_d0 <= valData_read_reg_820;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            fltData_d0 <= valData_0_data_out;
        else 
            fltData_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fltData_d1_assign_proc : process(valData_0_data_out, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_block_pp1_stage1, valData_read_reg_820, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2)
    begin
        if ((ap_enable_reg_pp1_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then 
                fltData_d1 <= valData_read_reg_820;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                fltData_d1 <= valData_0_data_out;
            else 
                fltData_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            fltData_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fltData_we0_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, icmp_ln424_reg_799, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_block_pp1_stage1_11001, icmp_ln436_fu_554_p2, icmp_ln436_reg_826, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_11001, ap_enable_reg_pp1_iter1)
    begin
        if ((((icmp_ln436_reg_826 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((icmp_ln436_reg_826 = ap_const_lv1_1) and (icmp_ln424_reg_799 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((icmp_ln436_fu_554_p2 = ap_const_lv1_1) and (icmp_ln424_reg_799 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
            fltData_we0 <= ap_const_logic_1;
        else 
            fltData_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fltData_we1_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, icmp_ln424_reg_799, ap_block_pp1_stage1_11001, icmp_ln436_fu_554_p2, icmp_ln436_reg_826, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_11001)
    begin
        if ((((icmp_ln436_reg_826 = ap_const_lv1_1) and (icmp_ln424_reg_799 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((icmp_ln436_fu_554_p2 = ap_const_lv1_1) and (icmp_ln424_reg_799 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
            fltData_we1 <= ap_const_logic_1;
        else 
            fltData_we1 <= ap_const_logic_0;
        end if; 
    end process;


    fltGradient_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_block_pp2_stage0, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp2_iter1, grp_bgd_func4_fu_393_pfltGradient_address0, grp_bgd_func2_fu_403_pfltGradient_address0, grp_bgd_func3_fu_413_pfltGradient_address0, grp_bgd_func1_fu_423_pfltGradient_address0, grp_bgd_func0_fu_433_pfltGradient_address0, ap_CS_fsm_state21, zext_ln409_fu_507_p1, zext_ln472_fu_738_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            fltGradient_address0 <= zext_ln472_fu_738_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fltGradient_address0 <= zext_ln409_fu_507_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            fltGradient_address0 <= grp_bgd_func0_fu_433_pfltGradient_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            fltGradient_address0 <= grp_bgd_func1_fu_423_pfltGradient_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            fltGradient_address0 <= grp_bgd_func3_fu_413_pfltGradient_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            fltGradient_address0 <= grp_bgd_func2_fu_403_pfltGradient_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            fltGradient_address0 <= grp_bgd_func4_fu_393_pfltGradient_address0;
        else 
            fltGradient_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    fltGradient_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp2_iter1, grp_bgd_func4_fu_393_pfltGradient_ce0, grp_bgd_func2_fu_403_pfltGradient_ce0, grp_bgd_func3_fu_413_pfltGradient_ce0, grp_bgd_func1_fu_423_pfltGradient_ce0, grp_bgd_func0_fu_433_pfltGradient_ce0, ap_CS_fsm_state21)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            fltGradient_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            fltGradient_ce0 <= grp_bgd_func0_fu_433_pfltGradient_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            fltGradient_ce0 <= grp_bgd_func1_fu_423_pfltGradient_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            fltGradient_ce0 <= grp_bgd_func3_fu_413_pfltGradient_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            fltGradient_ce0 <= grp_bgd_func2_fu_403_pfltGradient_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            fltGradient_ce0 <= grp_bgd_func4_fu_393_pfltGradient_ce0;
        else 
            fltGradient_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fltGradient_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_enable_reg_pp0_iter1, grp_bgd_func4_fu_393_pfltGradient_d0, grp_bgd_func2_fu_403_pfltGradient_d0, grp_bgd_func3_fu_413_pfltGradient_d0, grp_bgd_func1_fu_423_pfltGradient_d0, grp_bgd_func0_fu_433_pfltGradient_d0, ap_CS_fsm_state21)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fltGradient_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            fltGradient_d0 <= grp_bgd_func0_fu_433_pfltGradient_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            fltGradient_d0 <= grp_bgd_func1_fu_423_pfltGradient_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            fltGradient_d0 <= grp_bgd_func3_fu_413_pfltGradient_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            fltGradient_d0 <= grp_bgd_func2_fu_403_pfltGradient_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            fltGradient_d0 <= grp_bgd_func4_fu_393_pfltGradient_d0;
        else 
            fltGradient_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fltGradient_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln397_reg_756, ap_block_pp0_stage0_11001, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_enable_reg_pp0_iter1, grp_bgd_func4_fu_393_pfltGradient_we0, grp_bgd_func2_fu_403_pfltGradient_we0, grp_bgd_func3_fu_413_pfltGradient_we0, grp_bgd_func1_fu_423_pfltGradient_we0, grp_bgd_func0_fu_433_pfltGradient_we0, ap_CS_fsm_state21)
    begin
        if (((icmp_ln397_reg_756 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fltGradient_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            fltGradient_we0 <= grp_bgd_func0_fu_433_pfltGradient_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            fltGradient_we0 <= grp_bgd_func1_fu_423_pfltGradient_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            fltGradient_we0 <= grp_bgd_func3_fu_413_pfltGradient_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            fltGradient_we0 <= grp_bgd_func2_fu_403_pfltGradient_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            fltGradient_we0 <= grp_bgd_func4_fu_393_pfltGradient_we0;
        else 
            fltGradient_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fltLabel_address0_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_block_pp1_stage1, select_ln430_reg_808, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, zext_ln448_fu_623_p1, zext_ln451_fu_640_p1, zext_ln453_fu_651_p1, zext_ln454_fu_662_p1, zext_ln455_fu_673_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            fltLabel_address0 <= zext_ln455_fu_673_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            fltLabel_address0 <= zext_ln454_fu_662_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            fltLabel_address0 <= zext_ln453_fu_651_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            fltLabel_address0 <= zext_ln451_fu_640_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            fltLabel_address0 <= zext_ln448_fu_623_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            fltLabel_address0 <= select_ln430_reg_808(4 - 1 downto 0);
        else 
            fltLabel_address0 <= "XXXX";
        end if; 
    end process;


    fltLabel_ce0_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_block_pp1_stage1_11001, ap_CS_fsm_state11, ap_CS_fsm_state13, grp_bgd_func0_fu_433_ap_done, ap_CS_fsm_state15, grp_bgd_func1_fu_423_ap_done, ap_CS_fsm_state17, grp_bgd_func2_fu_403_ap_done, ap_CS_fsm_state19, grp_bgd_func3_fu_413_ap_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((grp_bgd_func3_fu_413_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((grp_bgd_func2_fu_403_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((grp_bgd_func1_fu_423_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((grp_bgd_func0_fu_433_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
            fltLabel_ce0 <= ap_const_logic_1;
        else 
            fltLabel_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fltLabel_we0_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, icmp_ln424_reg_799, ap_block_pp1_stage1_11001, icmp_ln436_fu_554_p2)
    begin
        if (((icmp_ln436_fu_554_p2 = ap_const_lv1_0) and (icmp_ln424_reg_799 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            fltLabel_we0 <= ap_const_logic_1;
        else 
            fltLabel_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fltWeight_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_enable_reg_pp0_iter1, grp_bgd_func4_fu_393_pfltWeight_address0, grp_bgd_func2_fu_403_pfltWeight_address0, grp_bgd_func3_fu_413_pfltWeight_address0, grp_bgd_func1_fu_423_pfltWeight_address0, grp_bgd_func0_fu_433_pfltWeight_address0, ap_CS_fsm_state21, zext_ln409_fu_507_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fltWeight_address0 <= zext_ln409_fu_507_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            fltWeight_address0 <= grp_bgd_func0_fu_433_pfltWeight_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            fltWeight_address0 <= grp_bgd_func1_fu_423_pfltWeight_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            fltWeight_address0 <= grp_bgd_func3_fu_413_pfltWeight_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            fltWeight_address0 <= grp_bgd_func2_fu_403_pfltWeight_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            fltWeight_address0 <= grp_bgd_func4_fu_393_pfltWeight_address0;
        else 
            fltWeight_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    fltWeight_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_enable_reg_pp0_iter1, grp_bgd_func4_fu_393_pfltWeight_ce0, grp_bgd_func2_fu_403_pfltWeight_ce0, grp_bgd_func3_fu_413_pfltWeight_ce0, grp_bgd_func1_fu_423_pfltWeight_ce0, grp_bgd_func0_fu_433_pfltWeight_ce0, ap_CS_fsm_state21)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fltWeight_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            fltWeight_ce0 <= grp_bgd_func0_fu_433_pfltWeight_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            fltWeight_ce0 <= grp_bgd_func1_fu_423_pfltWeight_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            fltWeight_ce0 <= grp_bgd_func3_fu_413_pfltWeight_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            fltWeight_ce0 <= grp_bgd_func2_fu_403_pfltWeight_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            fltWeight_ce0 <= grp_bgd_func4_fu_393_pfltWeight_ce0;
        else 
            fltWeight_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fltWeight_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln397_reg_756, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln397_reg_756 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fltWeight_we0 <= ap_const_logic_1;
        else 
            fltWeight_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_bgd_func0_fu_433_ap_start <= grp_bgd_func0_fu_433_ap_start_reg;
    grp_bgd_func1_fu_423_ap_start <= grp_bgd_func1_fu_423_ap_start_reg;
    grp_bgd_func2_fu_403_ap_start <= grp_bgd_func2_fu_403_ap_start_reg;
    grp_bgd_func3_fu_413_ap_start <= grp_bgd_func3_fu_413_ap_start_reg;
    grp_bgd_func4_fu_393_ap_start <= grp_bgd_func4_fu_393_ap_start_reg;
    grp_fu_742_p0 <= ap_const_lv14_311(11 - 1 downto 0);
    grp_fu_749_p0 <= ap_const_lv14_311(11 - 1 downto 0);
    i_1_fu_702_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_i5_0_phi_fu_375_p4));
    i_fu_471_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_i_0_phi_fu_297_p4));
    icmp_ln397_fu_453_p2 <= "1" when (loop_0_reg_304 = ap_const_lv13_1EAA) else "0";
    icmp_ln401_fu_465_p2 <= "1" when (j_0_reg_282 = ap_const_lv32_311) else "0";
    icmp_ln421_fu_512_p2 <= "1" when (ch_0_reg_315 = ap_const_lv12_FA0) else "0";
    icmp_ln424_fu_524_p2 <= "1" when (ap_phi_mux_loop1_0_phi_fu_341_p4 = ap_const_lv10_31B) else "0";
    icmp_ln430_fu_536_p2 <= "1" when (ap_phi_mux_j3_0_phi_fu_330_p4 = ap_const_lv32_31B) else "0";
    icmp_ln436_fu_554_p2 <= "1" when (unsigned(select_ln430_reg_808) > unsigned(ap_const_lv32_9)) else "0";
    icmp_ln448_fu_628_p2 <= "1" when (unsigned(cla_0_reg_348) < unsigned(ap_const_lv4_A)) else "0";
    icmp_ln461_fu_684_p2 <= "1" when (loop4_0_reg_360 = ap_const_lv13_1EAA) else "0";
    icmp_ln465_fu_696_p2 <= "1" when (j6_0_reg_382 = ap_const_lv32_311) else "0";
    j_1_fu_732_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(select_ln465_1_fu_720_p3));
    j_2_fu_608_p2 <= std_logic_vector(unsigned(select_ln430_reg_808) + unsigned(ap_const_lv32_1));
    j_fu_501_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(select_ln401_fu_477_p3));
    loop_1_fu_690_p2 <= std_logic_vector(unsigned(loop4_0_reg_360) + unsigned(ap_const_lv13_1));
    loop_2_fu_530_p2 <= std_logic_vector(unsigned(ap_phi_mux_loop1_0_phi_fu_341_p4) + unsigned(ap_const_lv10_1));
    loop_fu_459_p2 <= std_logic_vector(unsigned(loop_0_reg_304) + unsigned(ap_const_lv13_1));
    select_ln401_1_fu_489_p3 <= 
        i_fu_471_p2 when (icmp_ln401_fu_465_p2(0) = '1') else 
        ap_phi_mux_i_0_phi_fu_297_p4;
    select_ln401_fu_477_p3 <= 
        ap_const_lv32_0 when (icmp_ln401_fu_465_p2(0) = '1') else 
        j_0_reg_282;
    select_ln430_fu_542_p3 <= 
        ap_const_lv32_0 when (icmp_ln430_fu_536_p2(0) = '1') else 
        ap_phi_mux_j3_0_phi_fu_330_p4;
    select_ln465_1_fu_720_p3 <= 
        ap_const_lv32_0 when (icmp_ln465_fu_696_p2(0) = '1') else 
        j6_0_reg_382;
    select_ln465_fu_708_p3 <= 
        i_1_fu_702_p2 when (icmp_ln465_fu_696_p2(0) = '1') else 
        ap_phi_mux_i5_0_phi_fu_375_p4;
        sext_ln439_1_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln439_4_fu_613_p2),32));

        sext_ln439_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln439_3_fu_597_p2),32));

    trunc_ln401_fu_485_p1 <= select_ln401_fu_477_p3(14 - 1 downto 0);
    trunc_ln409_fu_497_p1 <= select_ln401_1_fu_489_p3(14 - 1 downto 0);
    trunc_ln435_fu_550_p1 <= select_ln430_fu_542_p3(11 - 1 downto 0);
    trunc_ln472_1_fu_728_p1 <= select_ln465_1_fu_720_p3(14 - 1 downto 0);
    trunc_ln472_fu_716_p1 <= select_ln465_fu_708_p3(14 - 1 downto 0);
    valData_0_ack_in <= valData_0_state(1);

    valData_0_ack_out_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, icmp_ln424_reg_799, ap_block_pp1_stage1_11001)
    begin
        if (((icmp_ln424_reg_799 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            valData_0_ack_out <= ap_const_logic_1;
        else 
            valData_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    valData_0_data_out_assign_proc : process(valData_0_payload_A, valData_0_payload_B, valData_0_sel)
    begin
        if ((valData_0_sel = ap_const_logic_1)) then 
            valData_0_data_out <= valData_0_payload_B;
        else 
            valData_0_data_out <= valData_0_payload_A;
        end if; 
    end process;

    valData_0_load_A <= (valData_0_state_cmp_full and not(valData_0_sel_wr));
    valData_0_load_B <= (valData_0_state_cmp_full and valData_0_sel_wr);
    valData_0_sel <= valData_0_sel_rd;
    valData_0_state_cmp_full <= '0' when (valData_0_state = ap_const_lv2_1) else '1';
    valData_0_vld_in <= valData_TVALID;
    valData_0_vld_out <= valData_0_state(0);

    valData_TDATA_blk_n_assign_proc : process(valData_0_state, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_block_pp1_stage1, icmp_ln424_reg_799)
    begin
        if (((icmp_ln424_reg_799 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            valData_TDATA_blk_n <= valData_0_state(0);
        else 
            valData_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    valData_TREADY <= valData_0_state(1);
    valGradient_1_ack_in <= valGradient_1_state(1);
    valGradient_1_ack_out <= valGradient_TREADY;

    valGradient_1_data_out_assign_proc : process(valGradient_1_payload_A, valGradient_1_payload_B, valGradient_1_sel)
    begin
        if ((valGradient_1_sel = ap_const_logic_1)) then 
            valGradient_1_data_out <= valGradient_1_payload_B;
        else 
            valGradient_1_data_out <= valGradient_1_payload_A;
        end if; 
    end process;

    valGradient_1_load_A <= (valGradient_1_state_cmp_full and not(valGradient_1_sel_wr));
    valGradient_1_load_B <= (valGradient_1_state_cmp_full and valGradient_1_sel_wr);
    valGradient_1_sel <= valGradient_1_sel_rd;
    valGradient_1_state_cmp_full <= '0' when (valGradient_1_state = ap_const_lv2_1) else '1';

    valGradient_1_vld_in_assign_proc : process(ap_enable_reg_pp2_iter2, icmp_ln461_reg_903_pp2_iter1_reg, ap_block_pp2_stage0_11001)
    begin
        if (((icmp_ln461_reg_903_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            valGradient_1_vld_in <= ap_const_logic_1;
        else 
            valGradient_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    valGradient_1_vld_out <= valGradient_1_state(0);
    valGradient_TDATA <= valGradient_1_data_out;

    valGradient_TDATA_blk_n_assign_proc : process(valGradient_1_state, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0, icmp_ln461_reg_903_pp2_iter1_reg, ap_enable_reg_pp2_iter3, icmp_ln461_reg_903_pp2_iter2_reg)
    begin
        if ((((icmp_ln461_reg_903_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1)) or ((icmp_ln461_reg_903_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)))) then 
            valGradient_TDATA_blk_n <= valGradient_1_state(1);
        else 
            valGradient_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    valGradient_TVALID <= valGradient_1_state(0);
    valWeight_0_ack_in <= valWeight_0_state(1);

    valWeight_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln397_fu_453_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln397_fu_453_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            valWeight_0_ack_out <= ap_const_logic_1;
        else 
            valWeight_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    valWeight_0_data_out_assign_proc : process(valWeight_0_payload_A, valWeight_0_payload_B, valWeight_0_sel)
    begin
        if ((valWeight_0_sel = ap_const_logic_1)) then 
            valWeight_0_data_out <= valWeight_0_payload_B;
        else 
            valWeight_0_data_out <= valWeight_0_payload_A;
        end if; 
    end process;

    valWeight_0_load_A <= (valWeight_0_state_cmp_full and not(valWeight_0_sel_wr));
    valWeight_0_load_B <= (valWeight_0_state_cmp_full and valWeight_0_sel_wr);
    valWeight_0_sel <= valWeight_0_sel_rd;
    valWeight_0_state_cmp_full <= '0' when (valWeight_0_state = ap_const_lv2_1) else '1';
    valWeight_0_vld_in <= valWeight_TVALID;
    valWeight_0_vld_out <= valWeight_0_state(0);

    valWeight_TDATA_blk_n_assign_proc : process(valWeight_0_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln397_fu_453_p2)
    begin
        if (((icmp_ln397_fu_453_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            valWeight_TDATA_blk_n <= valWeight_0_state(0);
        else 
            valWeight_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    valWeight_TREADY <= valWeight_0_state(1);
    zext_ln409_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_742_p3),32));
    zext_ln439_1_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln439_reg_830),13));
    zext_ln439_2_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln439_fu_559_p2),12));
    zext_ln439_3_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln439_1_fu_573_p2),32));
    zext_ln439_4_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln439_2_fu_587_p2),32));
    zext_ln439_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln439_fu_559_p2),32));
    zext_ln448_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cla_0_reg_348),32));
    zext_ln451_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln451_fu_634_p2),32));
    zext_ln453_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln453_fu_645_p2),32));
    zext_ln454_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln454_fu_656_p2),32));
    zext_ln455_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln455_fu_667_p2),32));
    zext_ln472_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_749_p3),32));
end behav;
