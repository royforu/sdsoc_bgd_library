// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module a4_bgd_func0 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vfltLabel,
        pfltWeight_address0,
        pfltWeight_ce0,
        pfltWeight_q0,
        pfltWeight_offset,
        pfltData_address0,
        pfltData_ce0,
        pfltData_q0,
        pfltGradient_address0,
        pfltGradient_ce0,
        pfltGradient_we0,
        pfltGradient_d0,
        pfltGradient_q0
);

parameter    ap_ST_fsm_state1 = 100'd1;
parameter    ap_ST_fsm_state2 = 100'd2;
parameter    ap_ST_fsm_state3 = 100'd4;
parameter    ap_ST_fsm_state4 = 100'd8;
parameter    ap_ST_fsm_state5 = 100'd16;
parameter    ap_ST_fsm_state6 = 100'd32;
parameter    ap_ST_fsm_state7 = 100'd64;
parameter    ap_ST_fsm_state8 = 100'd128;
parameter    ap_ST_fsm_state9 = 100'd256;
parameter    ap_ST_fsm_state10 = 100'd512;
parameter    ap_ST_fsm_state11 = 100'd1024;
parameter    ap_ST_fsm_state12 = 100'd2048;
parameter    ap_ST_fsm_state13 = 100'd4096;
parameter    ap_ST_fsm_state14 = 100'd8192;
parameter    ap_ST_fsm_state15 = 100'd16384;
parameter    ap_ST_fsm_state16 = 100'd32768;
parameter    ap_ST_fsm_state17 = 100'd65536;
parameter    ap_ST_fsm_state18 = 100'd131072;
parameter    ap_ST_fsm_state19 = 100'd262144;
parameter    ap_ST_fsm_state20 = 100'd524288;
parameter    ap_ST_fsm_state21 = 100'd1048576;
parameter    ap_ST_fsm_state22 = 100'd2097152;
parameter    ap_ST_fsm_state23 = 100'd4194304;
parameter    ap_ST_fsm_state24 = 100'd8388608;
parameter    ap_ST_fsm_state25 = 100'd16777216;
parameter    ap_ST_fsm_state26 = 100'd33554432;
parameter    ap_ST_fsm_state27 = 100'd67108864;
parameter    ap_ST_fsm_state28 = 100'd134217728;
parameter    ap_ST_fsm_state29 = 100'd268435456;
parameter    ap_ST_fsm_state30 = 100'd536870912;
parameter    ap_ST_fsm_state31 = 100'd1073741824;
parameter    ap_ST_fsm_state32 = 100'd2147483648;
parameter    ap_ST_fsm_state33 = 100'd4294967296;
parameter    ap_ST_fsm_state34 = 100'd8589934592;
parameter    ap_ST_fsm_state35 = 100'd17179869184;
parameter    ap_ST_fsm_state36 = 100'd34359738368;
parameter    ap_ST_fsm_state37 = 100'd68719476736;
parameter    ap_ST_fsm_state38 = 100'd137438953472;
parameter    ap_ST_fsm_state39 = 100'd274877906944;
parameter    ap_ST_fsm_state40 = 100'd549755813888;
parameter    ap_ST_fsm_state41 = 100'd1099511627776;
parameter    ap_ST_fsm_state42 = 100'd2199023255552;
parameter    ap_ST_fsm_state43 = 100'd4398046511104;
parameter    ap_ST_fsm_state44 = 100'd8796093022208;
parameter    ap_ST_fsm_state45 = 100'd17592186044416;
parameter    ap_ST_fsm_state46 = 100'd35184372088832;
parameter    ap_ST_fsm_state47 = 100'd70368744177664;
parameter    ap_ST_fsm_state48 = 100'd140737488355328;
parameter    ap_ST_fsm_state49 = 100'd281474976710656;
parameter    ap_ST_fsm_state50 = 100'd562949953421312;
parameter    ap_ST_fsm_state51 = 100'd1125899906842624;
parameter    ap_ST_fsm_state52 = 100'd2251799813685248;
parameter    ap_ST_fsm_state53 = 100'd4503599627370496;
parameter    ap_ST_fsm_state54 = 100'd9007199254740992;
parameter    ap_ST_fsm_state55 = 100'd18014398509481984;
parameter    ap_ST_fsm_state56 = 100'd36028797018963968;
parameter    ap_ST_fsm_state57 = 100'd72057594037927936;
parameter    ap_ST_fsm_state58 = 100'd144115188075855872;
parameter    ap_ST_fsm_state59 = 100'd288230376151711744;
parameter    ap_ST_fsm_state60 = 100'd576460752303423488;
parameter    ap_ST_fsm_state61 = 100'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 100'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 100'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 100'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 100'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 100'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 100'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 100'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 100'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 100'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 100'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 100'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 100'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 100'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 100'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 100'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 100'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 100'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 100'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 100'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 100'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 100'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 100'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 100'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 100'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 100'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 100'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 100'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 100'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 100'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 100'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 100'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 100'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 100'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 100'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 100'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 100'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 100'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 100'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 100'd633825300114114700748351602688;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] vfltLabel;
output  [12:0] pfltWeight_address0;
output   pfltWeight_ce0;
input  [31:0] pfltWeight_q0;
input  [3:0] pfltWeight_offset;
output  [11:0] pfltData_address0;
output   pfltData_ce0;
input  [31:0] pfltData_q0;
output  [12:0] pfltGradient_address0;
output   pfltGradient_ce0;
output   pfltGradient_we0;
output  [31:0] pfltGradient_d0;
input  [31:0] pfltGradient_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg pfltWeight_ce0;
reg[11:0] pfltData_address0;
reg pfltData_ce0;
reg pfltGradient_ce0;
reg pfltGradient_we0;

(* fsm_encoding = "none" *) reg   [99:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_252;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state90;
wire   [31:0] grp_fu_227_p2;
reg   [31:0] reg_257;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state94;
wire   [31:0] fltDotTmp_q0;
reg   [31:0] reg_262;
wire    ap_CS_fsm_state17;
wire   [31:0] grp_fu_222_p2;
reg   [31:0] reg_268;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state99;
wire   [63:0] grp_fu_234_p1;
reg   [63:0] reg_275;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state79;
wire   [63:0] grp_fu_237_p2;
reg   [63:0] reg_281;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state86;
wire   [13:0] mul_ln501_fu_291_p2;
reg   [13:0] mul_ln501_reg_440;
wire   [2:0] m_fu_308_p2;
wire    ap_CS_fsm_state2;
wire   [2:0] m_9_fu_335_p2;
reg   [2:0] m_9_reg_460;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln500_fu_329_p2;
reg   [2:0] fltDotTmp_addr_9_reg_475;
wire   [9:0] fe0_fu_366_p2;
reg   [31:0] pfltWeight_load_reg_485;
wire   [2:0] m_10_fu_383_p2;
reg   [2:0] m_10_reg_493;
wire    ap_CS_fsm_state16;
wire   [0:0] icmp_ln506_fu_377_p2;
wire   [31:0] bitcast_ln513_1_fu_399_p1;
wire   [63:0] grp_fu_247_p2;
reg   [63:0] tmp_31_reg_508;
wire    ap_CS_fsm_state41;
wire   [63:0] grp_fu_242_p2;
reg   [63:0] tmp_33_reg_513;
wire   [31:0] grp_fu_231_p1;
reg   [31:0] fltDif_reg_518;
wire    ap_CS_fsm_state88;
wire    ap_CS_fsm_state89;
reg   [12:0] pfltGradient_addr_reg_528;
wire   [9:0] fe0_5_fu_429_p2;
reg   [9:0] fe0_5_reg_536;
reg   [31:0] pfltGradient_load_reg_541;
reg   [2:0] fltDotTmp_address0;
reg    fltDotTmp_ce0;
reg    fltDotTmp_we0;
reg   [31:0] fltDotTmp_d0;
reg   [2:0] m_0_reg_154;
wire   [0:0] icmp_ln490_fu_302_p2;
reg   [9:0] fe0_0_reg_165;
reg   [2:0] m1_0_reg_177;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln496_fu_314_p2;
wire    ap_CS_fsm_state15;
reg   [31:0] fltDot_0_reg_188;
reg   [2:0] m2_0_reg_200;
reg   [9:0] fe03_0_reg_211;
wire    ap_CS_fsm_state100;
wire   [31:0] zext_ln490_fu_297_p1;
wire  signed [31:0] sext_ln501_fu_361_p1;
wire   [31:0] zext_ln501_fu_347_p1;
wire   [31:0] zext_ln500_1_fu_324_p1;
wire   [31:0] zext_ln506_fu_372_p1;
wire   [31:0] zext_ln517_fu_404_p1;
wire  signed [31:0] sext_ln520_fu_418_p1;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state93;
reg   [31:0] grp_fu_222_p0;
reg   [31:0] grp_fu_222_p1;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state95;
reg   [31:0] grp_fu_227_p0;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state91;
wire    ap_CS_fsm_state87;
reg   [31:0] grp_fu_234_p0;
wire    ap_CS_fsm_state78;
reg   [63:0] grp_fu_237_p0;
reg   [63:0] grp_fu_237_p1;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state80;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state24;
wire   [3:0] mul_ln501_fu_291_p0;
wire   [9:0] zext_ln500_fu_320_p1;
wire   [9:0] add_ln501_fu_341_p2;
wire   [13:0] zext_ln501_2_fu_352_p1;
wire   [13:0] add_ln501_1_fu_356_p2;
wire   [31:0] bitcast_ln513_fu_389_p1;
wire   [31:0] xor_ln513_fu_393_p2;
wire   [13:0] zext_ln520_fu_409_p1;
wire   [13:0] add_ln520_fu_413_p2;
reg   [1:0] grp_fu_237_opcode;
wire   [0:0] icmp_ln517_fu_423_p2;
reg   [99:0] ap_NS_fsm;
wire   [13:0] mul_ln501_fu_291_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 100'd1;
end

a4_bgd_func0_fltDotTmp #(
    .DataWidth( 32 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
fltDotTmp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fltDotTmp_address0),
    .ce0(fltDotTmp_ce0),
    .we0(fltDotTmp_we0),
    .d0(fltDotTmp_d0),
    .q0(fltDotTmp_q0)
);

a4_bgd_accel_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
bgd_accel_fadd_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_222_p0),
    .din1(grp_fu_222_p1),
    .ce(1'b1),
    .dout(grp_fu_222_p2)
);

a4_bgd_accel_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
bgd_accel_fmul_32ns_32ns_32_4_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_227_p0),
    .din1(reg_252),
    .ce(1'b1),
    .dout(grp_fu_227_p2)
);

a4_bgd_accel_fptrunc_64ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
bgd_accel_fptrunc_64ns_32_2_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_281),
    .ce(1'b1),
    .dout(grp_fu_231_p1)
);

a4_bgd_accel_fpext_32ns_64_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
bgd_accel_fpext_32ns_64_2_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_234_p0),
    .ce(1'b1),
    .dout(grp_fu_234_p1)
);

a4_bgd_accel_dadddsub_64ns_64ns_64_7_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
bgd_accel_dadddsub_64ns_64ns_64_7_full_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_237_p0),
    .din1(grp_fu_237_p1),
    .opcode(grp_fu_237_opcode),
    .ce(1'b1),
    .dout(grp_fu_237_p2)
);

a4_bgd_accel_ddiv_64ns_64ns_64_31_1 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
bgd_accel_ddiv_64ns_64ns_64_31_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd4607182418800017408),
    .din1(reg_281),
    .ce(1'b1),
    .dout(grp_fu_242_p2)
);

a4_bgd_accel_dexp_64ns_64ns_64_18_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 18 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
bgd_accel_dexp_64ns_64ns_64_18_full_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(reg_275),
    .ce(1'b1),
    .dout(grp_fu_247_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state100)) begin
        fe03_0_reg_211 <= fe0_5_reg_536;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        fe03_0_reg_211 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln490_fu_302_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        fe0_0_reg_165 <= 10'd0;
    end else if (((icmp_ln500_fu_329_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        fe0_0_reg_165 <= fe0_fu_366_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln496_fu_314_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        fltDot_0_reg_188 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        fltDot_0_reg_188 <= grp_fu_222_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        m1_0_reg_177 <= m_9_reg_460;
    end else if (((icmp_ln496_fu_314_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        m1_0_reg_177 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln496_fu_314_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        m2_0_reg_200 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        m2_0_reg_200 <= m_10_reg_493;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln490_fu_302_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        m_0_reg_154 <= m_fu_308_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        m_0_reg_154 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        fe0_5_reg_536 <= fe0_5_fu_429_p2;
        pfltGradient_addr_reg_528 <= sext_ln520_fu_418_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        fltDif_reg_518 <= grp_fu_231_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln500_fu_329_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        fltDotTmp_addr_9_reg_475 <= zext_ln500_1_fu_324_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        m_10_reg_493 <= m_10_fu_383_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        m_9_reg_460 <= m_9_fu_335_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        mul_ln501_reg_440 <= mul_ln501_fu_291_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state94)) begin
        pfltGradient_load_reg_541 <= pfltGradient_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        pfltWeight_load_reg_485 <= pfltWeight_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_252 <= pfltData_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_257 <= grp_fu_227_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_262 <= fltDotTmp_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state14))) begin
        reg_268 <= grp_fu_222_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state23))) begin
        reg_275 <= grp_fu_234_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state48))) begin
        reg_281 <= grp_fu_237_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        tmp_31_reg_508 <= grp_fu_247_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        tmp_33_reg_513 <= grp_fu_242_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln517_fu_423_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state89)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln517_fu_423_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state89))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        fltDotTmp_address0 = zext_ln506_fu_372_p1;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state15))) begin
        fltDotTmp_address0 = fltDotTmp_addr_9_reg_475;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        fltDotTmp_address0 = zext_ln490_fu_297_p1;
    end else begin
        fltDotTmp_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state2))) begin
        fltDotTmp_ce0 = 1'b1;
    end else begin
        fltDotTmp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        fltDotTmp_d0 = reg_268;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        fltDotTmp_d0 = 32'd0;
    end else begin
        fltDotTmp_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | ((icmp_ln490_fu_302_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        fltDotTmp_we0 = 1'b1;
    end else begin
        fltDotTmp_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        grp_fu_222_p0 = pfltGradient_load_reg_541;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_222_p0 = fltDot_0_reg_188;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_222_p0 = reg_262;
    end else begin
        grp_fu_222_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_222_p1 = reg_262;
    end else if (((1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_222_p1 = reg_257;
    end else begin
        grp_fu_222_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        grp_fu_227_p0 = fltDif_reg_518;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_227_p0 = pfltWeight_load_reg_485;
    end else begin
        grp_fu_227_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_fu_234_p0 = vfltLabel;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_234_p0 = bitcast_ln513_1_fu_399_p1;
    end else begin
        grp_fu_234_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        grp_fu_237_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_237_opcode = 2'd0;
    end else begin
        grp_fu_237_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        grp_fu_237_p0 = tmp_33_reg_513;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_237_p0 = tmp_31_reg_508;
    end else begin
        grp_fu_237_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        grp_fu_237_p1 = reg_275;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_237_p1 = 64'd4607182418800017408;
    end else begin
        grp_fu_237_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        pfltData_address0 = zext_ln517_fu_404_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        pfltData_address0 = zext_ln501_fu_347_p1;
    end else begin
        pfltData_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state4))) begin
        pfltData_ce0 = 1'b1;
    end else begin
        pfltData_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state100))) begin
        pfltGradient_ce0 = 1'b1;
    end else begin
        pfltGradient_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state100)) begin
        pfltGradient_we0 = 1'b1;
    end else begin
        pfltGradient_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        pfltWeight_ce0 = 1'b1;
    end else begin
        pfltWeight_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln490_fu_302_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln496_fu_314_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln500_fu_329_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state16 : begin
            if (((icmp_ln506_fu_377_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            if (((icmp_ln517_fu_423_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state89))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state90;
            end
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln501_1_fu_356_p2 = (mul_ln501_reg_440 + zext_ln501_2_fu_352_p1);

assign add_ln501_fu_341_p2 = (fe0_0_reg_165 + zext_ln500_fu_320_p1);

assign add_ln520_fu_413_p2 = (mul_ln501_reg_440 + zext_ln520_fu_409_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd98];

assign bitcast_ln513_1_fu_399_p1 = xor_ln513_fu_393_p2;

assign bitcast_ln513_fu_389_p1 = fltDot_0_reg_188;

assign fe0_5_fu_429_p2 = (fe03_0_reg_211 + 10'd1);

assign fe0_fu_366_p2 = (fe0_0_reg_165 + 10'd5);

assign icmp_ln490_fu_302_p2 = ((m_0_reg_154 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln496_fu_314_p2 = ((fe0_0_reg_165 < 10'd785) ? 1'b1 : 1'b0);

assign icmp_ln500_fu_329_p2 = ((m1_0_reg_177 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln506_fu_377_p2 = ((m2_0_reg_200 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln517_fu_423_p2 = ((fe03_0_reg_211 == 10'd785) ? 1'b1 : 1'b0);

assign m_10_fu_383_p2 = (m2_0_reg_200 + 3'd1);

assign m_9_fu_335_p2 = (m1_0_reg_177 + 3'd1);

assign m_fu_308_p2 = (m_0_reg_154 + 3'd1);

assign mul_ln501_fu_291_p0 = mul_ln501_fu_291_p00;

assign mul_ln501_fu_291_p00 = pfltWeight_offset;

assign mul_ln501_fu_291_p2 = (mul_ln501_fu_291_p0 * $signed('h311));

assign pfltGradient_address0 = pfltGradient_addr_reg_528;

assign pfltGradient_d0 = reg_268;

assign pfltWeight_address0 = sext_ln501_fu_361_p1;

assign sext_ln501_fu_361_p1 = $signed(add_ln501_1_fu_356_p2);

assign sext_ln520_fu_418_p1 = $signed(add_ln520_fu_413_p2);

assign xor_ln513_fu_393_p2 = (bitcast_ln513_fu_389_p1 ^ 32'd2147483648);

assign zext_ln490_fu_297_p1 = m_0_reg_154;

assign zext_ln500_1_fu_324_p1 = m1_0_reg_177;

assign zext_ln500_fu_320_p1 = m1_0_reg_177;

assign zext_ln501_2_fu_352_p1 = add_ln501_fu_341_p2;

assign zext_ln501_fu_347_p1 = add_ln501_fu_341_p2;

assign zext_ln506_fu_372_p1 = m2_0_reg_200;

assign zext_ln517_fu_404_p1 = fe03_0_reg_211;

assign zext_ln520_fu_409_p1 = fe03_0_reg_211;

endmodule //a4_bgd_func0
