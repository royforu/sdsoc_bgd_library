-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity a2_s2mm_data_copy is
generic (
    C_M_AXI_BUF_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_BUF_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_BUF_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUF_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_BUF_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUF_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUF_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUF_R_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUF_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_BUF_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_BUF_R_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_buf_r_AWVALID : OUT STD_LOGIC;
    m_axi_buf_r_AWREADY : IN STD_LOGIC;
    m_axi_buf_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_ADDR_WIDTH-1 downto 0);
    m_axi_buf_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_ID_WIDTH-1 downto 0);
    m_axi_buf_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_buf_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_buf_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_buf_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_AWUSER_WIDTH-1 downto 0);
    m_axi_buf_r_WVALID : OUT STD_LOGIC;
    m_axi_buf_r_WREADY : IN STD_LOGIC;
    m_axi_buf_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_DATA_WIDTH-1 downto 0);
    m_axi_buf_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_DATA_WIDTH/8-1 downto 0);
    m_axi_buf_r_WLAST : OUT STD_LOGIC;
    m_axi_buf_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_ID_WIDTH-1 downto 0);
    m_axi_buf_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_WUSER_WIDTH-1 downto 0);
    m_axi_buf_r_ARVALID : OUT STD_LOGIC;
    m_axi_buf_r_ARREADY : IN STD_LOGIC;
    m_axi_buf_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_ADDR_WIDTH-1 downto 0);
    m_axi_buf_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_ID_WIDTH-1 downto 0);
    m_axi_buf_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_buf_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_buf_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_buf_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_ARUSER_WIDTH-1 downto 0);
    m_axi_buf_r_RVALID : IN STD_LOGIC;
    m_axi_buf_r_RREADY : OUT STD_LOGIC;
    m_axi_buf_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_BUF_R_DATA_WIDTH-1 downto 0);
    m_axi_buf_r_RLAST : IN STD_LOGIC;
    m_axi_buf_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_BUF_R_ID_WIDTH-1 downto 0);
    m_axi_buf_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUF_R_RUSER_WIDTH-1 downto 0);
    m_axi_buf_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_BVALID : IN STD_LOGIC;
    m_axi_buf_r_BREADY : OUT STD_LOGIC;
    m_axi_buf_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_BUF_R_ID_WIDTH-1 downto 0);
    m_axi_buf_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUF_R_BUSER_WIDTH-1 downto 0);
    fifo_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    fifo_TVALID : IN STD_LOGIC;
    fifo_TREADY : OUT STD_LOGIC;
    len : IN STD_LOGIC_VECTOR (31 downto 0);
    buf_offset : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of a2_s2mm_data_copy is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "a2_s2mm_data_copy,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045-ffg900-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=654,HLS_SYN_LUT=675,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fifo_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal fifo_0_vld_in : STD_LOGIC;
    signal fifo_0_vld_out : STD_LOGIC;
    signal fifo_0_ack_in : STD_LOGIC;
    signal fifo_0_ack_out : STD_LOGIC;
    signal fifo_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal fifo_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal fifo_0_sel_rd : STD_LOGIC := '0';
    signal fifo_0_sel_wr : STD_LOGIC := '0';
    signal fifo_0_sel : STD_LOGIC;
    signal fifo_0_load_A : STD_LOGIC;
    signal fifo_0_load_B : STD_LOGIC;
    signal fifo_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal fifo_0_state_cmp_full : STD_LOGIC;
    signal buf_r_blk_n_AW : STD_LOGIC;
    signal buf_r_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln42_reg_168 : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_r_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln44_reg_182 : STD_LOGIC_VECTOR (0 downto 0);
    signal fifo_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln42_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_r_AWVALID : STD_LOGIC;
    signal buf_r_AWREADY : STD_LOGIC;
    signal buf_r_WVALID : STD_LOGIC;
    signal buf_r_WREADY : STD_LOGIC;
    signal buf_r_ARREADY : STD_LOGIC;
    signal buf_r_RVALID : STD_LOGIC;
    signal buf_r_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_r_RLAST : STD_LOGIC;
    signal buf_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal buf_r_BVALID : STD_LOGIC;
    signal buf_r_BREADY : STD_LOGIC;
    signal buf_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal buf_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_104 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_145_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal fifo_read_reg_177 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln44_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal empty_fu_125_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state8 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal buf_offset1_fu_115_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln42_fu_136_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component a2_s2mm_data_copy_buf_r_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    s2mm_data_copy_buf_r_m_axi_U : component a2_s2mm_data_copy_buf_r_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_BUF_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_BUF_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_BUF_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_BUF_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_BUF_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_BUF_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_BUF_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_BUF_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_BUF_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_BUF_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_BUF_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_buf_r_AWVALID,
        AWREADY => m_axi_buf_r_AWREADY,
        AWADDR => m_axi_buf_r_AWADDR,
        AWID => m_axi_buf_r_AWID,
        AWLEN => m_axi_buf_r_AWLEN,
        AWSIZE => m_axi_buf_r_AWSIZE,
        AWBURST => m_axi_buf_r_AWBURST,
        AWLOCK => m_axi_buf_r_AWLOCK,
        AWCACHE => m_axi_buf_r_AWCACHE,
        AWPROT => m_axi_buf_r_AWPROT,
        AWQOS => m_axi_buf_r_AWQOS,
        AWREGION => m_axi_buf_r_AWREGION,
        AWUSER => m_axi_buf_r_AWUSER,
        WVALID => m_axi_buf_r_WVALID,
        WREADY => m_axi_buf_r_WREADY,
        WDATA => m_axi_buf_r_WDATA,
        WSTRB => m_axi_buf_r_WSTRB,
        WLAST => m_axi_buf_r_WLAST,
        WID => m_axi_buf_r_WID,
        WUSER => m_axi_buf_r_WUSER,
        ARVALID => m_axi_buf_r_ARVALID,
        ARREADY => m_axi_buf_r_ARREADY,
        ARADDR => m_axi_buf_r_ARADDR,
        ARID => m_axi_buf_r_ARID,
        ARLEN => m_axi_buf_r_ARLEN,
        ARSIZE => m_axi_buf_r_ARSIZE,
        ARBURST => m_axi_buf_r_ARBURST,
        ARLOCK => m_axi_buf_r_ARLOCK,
        ARCACHE => m_axi_buf_r_ARCACHE,
        ARPROT => m_axi_buf_r_ARPROT,
        ARQOS => m_axi_buf_r_ARQOS,
        ARREGION => m_axi_buf_r_ARREGION,
        ARUSER => m_axi_buf_r_ARUSER,
        RVALID => m_axi_buf_r_RVALID,
        RREADY => m_axi_buf_r_RREADY,
        RDATA => m_axi_buf_r_RDATA,
        RLAST => m_axi_buf_r_RLAST,
        RID => m_axi_buf_r_RID,
        RUSER => m_axi_buf_r_RUSER,
        RRESP => m_axi_buf_r_RRESP,
        BVALID => m_axi_buf_r_BVALID,
        BREADY => m_axi_buf_r_BREADY,
        BRESP => m_axi_buf_r_BRESP,
        BID => m_axi_buf_r_BID,
        BUSER => m_axi_buf_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => buf_r_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => buf_r_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => buf_r_RDATA,
        I_RID => buf_r_RID,
        I_RUSER => buf_r_RUSER,
        I_RRESP => buf_r_RRESP,
        I_RLAST => buf_r_RLAST,
        I_AWVALID => buf_r_AWVALID,
        I_AWREADY => buf_r_AWREADY,
        I_AWADDR => empty_fu_125_p1,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => len,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => buf_r_WVALID,
        I_WREADY => buf_r_WREADY,
        I_WDATA => fifo_read_reg_177,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => buf_r_BVALID,
        I_BREADY => buf_r_BREADY,
        I_BRESP => buf_r_BRESP,
        I_BID => buf_r_BID,
        I_BUSER => buf_r_BUSER);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((buf_r_AWREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((buf_r_AWREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    fifo_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                fifo_0_sel_rd <= ap_const_logic_0;
            else
                if (((fifo_0_ack_out = ap_const_logic_1) and (fifo_0_vld_out = ap_const_logic_1))) then 
                                        fifo_0_sel_rd <= not(fifo_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    fifo_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                fifo_0_sel_wr <= ap_const_logic_0;
            else
                if (((fifo_0_ack_in = ap_const_logic_1) and (fifo_0_vld_in = ap_const_logic_1))) then 
                                        fifo_0_sel_wr <= not(fifo_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    fifo_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                fifo_0_state <= ap_const_lv2_0;
            else
                if ((((fifo_0_state = ap_const_lv2_2) and (fifo_0_vld_in = ap_const_logic_0)) or ((fifo_0_state = ap_const_lv2_3) and (fifo_0_vld_in = ap_const_logic_0) and (fifo_0_ack_out = ap_const_logic_1)))) then 
                    fifo_0_state <= ap_const_lv2_2;
                elsif ((((fifo_0_state = ap_const_lv2_1) and (fifo_0_ack_out = ap_const_logic_0)) or ((fifo_0_state = ap_const_lv2_3) and (fifo_0_ack_out = ap_const_logic_0) and (fifo_0_vld_in = ap_const_logic_1)))) then 
                    fifo_0_state <= ap_const_lv2_1;
                elsif (((not(((fifo_0_vld_in = ap_const_logic_0) and (fifo_0_ack_out = ap_const_logic_1))) and not(((fifo_0_ack_out = ap_const_logic_0) and (fifo_0_vld_in = ap_const_logic_1))) and (fifo_0_state = ap_const_lv2_3)) or ((fifo_0_state = ap_const_lv2_1) and (fifo_0_ack_out = ap_const_logic_1)) or ((fifo_0_state = ap_const_lv2_2) and (fifo_0_vld_in = ap_const_logic_1)))) then 
                    fifo_0_state <= ap_const_lv2_3;
                else 
                    fifo_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln42_fu_140_p2 = ap_const_lv1_1))) then 
                i_0_reg_104 <= i_fu_145_p2;
            elsif ((not(((buf_r_AWREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_104 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((fifo_0_load_A = ap_const_logic_1)) then
                fifo_0_payload_A <= fifo_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((fifo_0_load_B = ap_const_logic_1)) then
                fifo_0_payload_B <= fifo_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln42_fu_140_p2 = ap_const_lv1_1))) then
                fifo_read_reg_177 <= fifo_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln42_reg_168 <= icmp_ln42_fu_140_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                icmp_ln44_reg_182 <= icmp_ln44_fu_151_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state8, icmp_ln44_reg_182, ap_enable_reg_pp0_iter0, icmp_ln42_fu_140_p2, buf_r_AWREADY, buf_r_BVALID, icmp_ln44_fu_151_p2, ap_CS_fsm_state4, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((buf_r_AWREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln42_fu_140_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln42_fu_140_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln44_fu_151_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if ((not(((buf_r_BVALID = ap_const_logic_0) and (icmp_ln44_reg_182 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(fifo_0_vld_out, ap_enable_reg_pp0_iter0, icmp_ln42_fu_140_p2)
    begin
                ap_block_pp0_stage0_01001 <= ((fifo_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln42_fu_140_p2 = ap_const_lv1_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(fifo_0_vld_out, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, icmp_ln42_fu_140_p2, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_11001 <= (((fifo_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln42_fu_140_p2 = ap_const_lv1_1)) or ((ap_const_boolean_1 = ap_block_state3_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(fifo_0_vld_out, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, icmp_ln42_fu_140_p2, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_subdone <= (((fifo_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln42_fu_140_p2 = ap_const_lv1_1)) or ((ap_const_boolean_1 = ap_block_state3_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(fifo_0_vld_out, icmp_ln42_fu_140_p2)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((fifo_0_vld_out = ap_const_logic_0) and (icmp_ln42_fu_140_p2 = ap_const_lv1_1));
    end process;


    ap_block_state3_io_assign_proc : process(icmp_ln42_reg_168, buf_r_WREADY)
    begin
                ap_block_state3_io <= ((buf_r_WREADY = ap_const_logic_0) and (icmp_ln42_reg_168 = ap_const_lv1_1));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_assign_proc : process(icmp_ln44_reg_182, buf_r_BVALID)
    begin
                ap_block_state8 <= ((buf_r_BVALID = ap_const_logic_0) and (icmp_ln44_reg_182 = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln42_fu_140_p2)
    begin
        if ((icmp_ln42_fu_140_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state8, icmp_ln44_reg_182, buf_r_BVALID)
    begin
        if ((not(((buf_r_BVALID = ap_const_logic_0) and (icmp_ln44_reg_182 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8, icmp_ln44_reg_182, buf_r_BVALID)
    begin
        if ((not(((buf_r_BVALID = ap_const_logic_0) and (icmp_ln44_reg_182 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    buf_offset1_fu_115_p4 <= buf_offset(31 downto 2);

    buf_r_AWVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, buf_r_AWREADY)
    begin
        if ((not(((buf_r_AWREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            buf_r_AWVALID <= ap_const_logic_1;
        else 
            buf_r_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    buf_r_BREADY_assign_proc : process(ap_CS_fsm_state8, icmp_ln44_reg_182, buf_r_BVALID)
    begin
        if ((not(((buf_r_BVALID = ap_const_logic_0) and (icmp_ln44_reg_182 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln44_reg_182 = ap_const_lv1_0))) then 
            buf_r_BREADY <= ap_const_logic_1;
        else 
            buf_r_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    buf_r_WVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln42_reg_168, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln42_reg_168 = ap_const_lv1_1))) then 
            buf_r_WVALID <= ap_const_logic_1;
        else 
            buf_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    buf_r_blk_n_AW_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_buf_r_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            buf_r_blk_n_AW <= m_axi_buf_r_AWREADY;
        else 
            buf_r_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    buf_r_blk_n_B_assign_proc : process(m_axi_buf_r_BVALID, ap_CS_fsm_state8, icmp_ln44_reg_182)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln44_reg_182 = ap_const_lv1_0))) then 
            buf_r_blk_n_B <= m_axi_buf_r_BVALID;
        else 
            buf_r_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    buf_r_blk_n_W_assign_proc : process(m_axi_buf_r_WREADY, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln42_reg_168)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln42_reg_168 = ap_const_lv1_1))) then 
            buf_r_blk_n_W <= m_axi_buf_r_WREADY;
        else 
            buf_r_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    empty_fu_125_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(buf_offset1_fu_115_p4),32));
    fifo_0_ack_in <= fifo_0_state(1);

    fifo_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln42_fu_140_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln42_fu_140_p2 = ap_const_lv1_1))) then 
            fifo_0_ack_out <= ap_const_logic_1;
        else 
            fifo_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    fifo_0_data_out_assign_proc : process(fifo_0_payload_A, fifo_0_payload_B, fifo_0_sel)
    begin
        if ((fifo_0_sel = ap_const_logic_1)) then 
            fifo_0_data_out <= fifo_0_payload_B;
        else 
            fifo_0_data_out <= fifo_0_payload_A;
        end if; 
    end process;

    fifo_0_load_A <= (fifo_0_state_cmp_full and not(fifo_0_sel_wr));
    fifo_0_load_B <= (fifo_0_state_cmp_full and fifo_0_sel_wr);
    fifo_0_sel <= fifo_0_sel_rd;
    fifo_0_state_cmp_full <= '0' when (fifo_0_state = ap_const_lv2_1) else '1';
    fifo_0_vld_in <= fifo_TVALID;
    fifo_0_vld_out <= fifo_0_state(0);

    fifo_TDATA_blk_n_assign_proc : process(fifo_0_state, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln42_fu_140_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln42_fu_140_p2 = ap_const_lv1_1))) then 
            fifo_TDATA_blk_n <= fifo_0_state(0);
        else 
            fifo_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_TREADY <= fifo_0_state(1);
    i_fu_145_p2 <= std_logic_vector(unsigned(i_0_reg_104) + unsigned(ap_const_lv31_1));
    icmp_ln42_fu_140_p2 <= "1" when (signed(zext_ln42_fu_136_p1) < signed(len)) else "0";
    icmp_ln44_fu_151_p2 <= "1" when (len = ap_const_lv32_0) else "0";
    zext_ln42_fu_136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_104),32));
end behav;
